{
  "articles": [
    {
      "path": "01-grammar-rmarkdown.html",
      "title": "Segment 1: The Basics of ggplot2",
      "description": "Part 1 of the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly",
      "author": [
        {
          "name": "Cédric Scherer",
          "url": "https://cedricscherer.com"
        }
      ],
      "contents": "\r\n\r\nContents\r\nThe {ggplot2} Package\r\nAdvantages of {ggplot2}\r\n\r\nThe Setup\r\nThe Course Material\r\nThe Package\r\n\r\nThe Data Set\r\nImport the Data\r\n\r\nExercise 1\r\nThe Grammar of Graphics\r\nThe Structure of ggplot2\r\nData: ggplot(data)\r\nAesthetics: aes()\r\nLayers: geom_*() and stat_*()\r\nAesthetics: aes() (again)\r\nImportant Things First: Change the Default Theme\r\nLayers: geom_*() and stat_*() (repeated)\r\n\r\nExercise 2\r\nSaving a ggplot\r\nResources\r\nAppendix\r\nImport the Data\r\nAesthetics: aes()\r\nCoordinate Systems: coord_*()\r\n\r\nSession Info\r\n\r\nThe {ggplot2} Package\r\n\r\n{ggplot2} is a system for declaratively creating graphics,based on “The Grammar of Graphics” (Wilkinson, 2005). You provide the data, tell {ggplot2} how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\r\n\r\nAdvantages of {ggplot2}\r\nconsistent underlying grammar of graphics (Wilkinson, 2005)\r\nvery flexible, layered plot specification\r\ntheme system for polishing plot appearance\r\nactive and helpful community\r\nThe Setup\r\nThe Course Material\r\nClone the repository.\r\n\r\nOpen the R Project: hands-on-ggplot2.Rproj\r\n\r\nOpen the first script: 01-grammar.Rmd\r\n\r\nRun code locally\r\n\r\n… or knit the report\r\n\r\nThe Package\r\nggplot2 is a data visualization package for the programming language R created by Hadley Wickham.\r\nIt should be already installed on your system (if not run the first line in the following chunk). The functionality of the package can be loaded by calling library() as for any other package:\r\n\r\n\r\n#install.packages(\"ggplot2\")\r\nlibrary(ggplot2)\r\n\r\n\r\n\r\nggplot2 is part of the tidyverse package collection. Thus, you can also load tidyverse without running library(ggplot2):\r\n\r\n\r\n#install.packages(\"tidyverse\")\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nThe Data Set\r\nWe use cryptocurrency financial data, pulled from CoinMarketCap.com. For our purposes, we limit the data to the period 08/2017–12/2019 and the top 4 cryptocurrencies.\r\nI have already prepared the data. If you want to know how, you can have a look here.\r\nImport the Data\r\nUsing the read_csv() function form the {readr} package, we can read the data directly from the web:\r\n\r\n\r\nurl <- \"https://raw.githubusercontent.com/z3tt/hands-on-ggplot2/main/data/crypto_cleaned.csv\"\r\n\r\ndata <- readr::read_csv(url)\r\n\r\ndata\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nOf course, one can import local files as well:\r\n\r\n\r\ndata_local <- readr::read_csv(\"data/crypto_cleaned.csv\")\r\n\r\ndata_local\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nThis assumes that you have placed the file in a folder called data in your working directory.\r\nYou can specify this directory via setwd() or, and preferably, use R projects.\r\nShort Explanation of ::\r\nThe so–called namespace allows to access functions from a package directly without loading it first.\r\npackagename::function(argument)\r\nFurthermore, it helps readers to understand from which package a function is imported from.\r\nExercise 1\r\nImport the data set on Chicago weather data:https://raw.githubusercontent.com/z3tt/ggplot-courses/master/data/chicago-nmmaps.csv\r\nInspect the data.\r\nThe Grammar of Graphics\r\nThe Structure of ggplot2\r\n\r\nData: ggplot(data)\r\nWe need to specify the data in the ggplot() call:\r\n\r\n\r\nggplot(data = data)\r\n\r\n\r\n\r\n\r\nThere is only an empty panel because ggplot2 doesn’t know what of the data it should plot.\r\nAesthetics: aes()\r\nWe need to specify two variables we want to plot as positional aesthetics:\r\n\r\n\r\nggplot(data = data, mapping = aes(x = date, y = close))\r\n\r\n\r\n\r\n\r\nThere is only an empty panel because ggplot2 doesn’t know how it should plot the data.\r\nThanks to implicit matching of arguments in ggplot() and aes(), we can also write:\r\n\r\n\r\nggplot(data, aes(date, close))\r\n\r\n\r\n\r\n\r\nLayers: geom_*() and stat_*()\r\nBy adding one or multiple layers we can tell ggplot2 how to represent the data. There are lots of built-in geometric elements (geom's) and statistical transformations (stat's):\r\nAdapted from ggplot2.tidyverse.org/referenceWe can tell ggplot2 to represent the data for example as a scatter plot:\r\n\r\n\r\nggplot(data, aes(date, close)) +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\nAesthetics: aes() (again)\r\nAesthetics do not only refer to x and y positions, but also groupings, colors, fills, shapes etc.\r\n\r\n\r\nggplot(data = data, mapping = aes(x = date, y = close, color = currency)) +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\nImportant Things First: Change the Default Theme\r\nYou can replace the default theme with one of the other built-in themes with theme_set(). Note that you can as well adjust some global settings, for example the base_size which is often too small in the default (11).\r\n\r\n\r\ntheme_set(theme_light(base_size = 18))\r\n\r\n\r\n\r\nBy using theme_set() the new theme is used for any plot you create aftwerwards! Give it a try on go back to the last chunk and re-run the code to generate the colored scatter plot.\r\nLayers: geom_*() and stat_*() (repeated)\r\nThe exciting thing about layers is that you can combine several geom_*() and stat_*() calls:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\n… and aesthetics can be applied either globally:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency, shape = currency)) +\r\n  geom_line() +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\n… or for each layer individually:\r\n\r\n\r\nggplot(data, aes(date, close)) +\r\n  geom_line(aes(color = currency)) +\r\n  geom_point(aes(shape = currency))\r\n\r\n\r\n\r\n\r\nExercise 2\r\nIf needed, import the Chicago weather data again:\r\n\r\n\r\nchic <- readr::read_csv(\r\n  \"https://raw.githubusercontent.com/z3tt/ggplot-courses/master/data/chicago-nmmaps.csv\"\r\n)\r\n\r\n\r\n\r\nCreate a scatter plot of temperature (temp) versus day (date).\r\nColor the points by season (season).\r\nColor the points by year (year).\r\nWhat’s the problem? How could you fix it?\r\n\r\nBonus: Turn the scatter plot, colored by season, into a line plot.\r\nWhat’s the problem? How could you fix it?\r\n\r\nSaving a ggplot\r\nYou can export your plot via the ggsave() function:\r\n\r\n\r\nggsave(filename = \"my_ggplot.pdf\", \r\n       width = 10, height = 7, \r\n       device = cairo_pdf)\r\n\r\nggsave(filename = \"my_ggplot.png\", \r\n       width = 10, height = 7, \r\n       dpi = 700)\r\n\r\n\r\n\r\nSource: canva.com-> Scales, Coordinate Systems, Facets, Themes, and Annotations will follow later\r\nResources\r\n“ggplot2: Elegant Graphics for Data Analysis”, free–access book by Hadley Wickham et al.\r\n{ggplot2} reference\r\n{ggplot2} cheatsheet\r\n“R for Data Science”, free–access book by Hadley Wickham\r\n“Data Visualization: A Practical Introduction”, free–access book by Kieran Healy\r\n“A {ggplot2} Tutorial for Beautiful Plotting in R”, my extensive “how to”-tutorial\r\nAppendix\r\nImport the Data\r\nThe {here} Package\r\nA good workflow when working with local files is offered by the {here} package in combination with R projects:\r\n\r\n\r\nhere::here()\r\n\r\n\r\n[1] \"C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\"\r\n\r\ndata_local <- readr::read_csv(here::here(\"data\", \"crypto_cleaned.csv\"))\r\n\r\ndata_local\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nBase R\r\nThe base R function read.csv() works in the same way as readr::read_csv():\r\n\r\n\r\ndata <- read.csv(here::here(\"data\", \"crypto_cleaned.csv\"))\r\n\r\nhead(data)\r\n\r\n\r\n      currency       date  open  high   low close year month yday\r\n1 binance-coin 2019-12-04 15.35 15.69 15.01 15.28 2019    12  338\r\n2 binance-coin 2019-12-03 15.19 15.55 15.05 15.31 2019    12  337\r\n3 binance-coin 2019-12-02 15.51 15.71 15.15 15.19 2019    12  336\r\n4 binance-coin 2019-12-01 15.74 15.74 15.05 15.50 2019    12  335\r\n5 binance-coin 2019-11-30 16.26 16.37 15.54 15.72 2019    11  334\r\n6 binance-coin 2019-11-29 15.68 16.34 15.65 16.27 2019    11  333\r\n\r\n… and we can turn it into a tibble afterwards:\r\n\r\n\r\ndata <- tibble::as_tibble(data)\r\n\r\ndata\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <chr>      <dbl> <dbl> <dbl> <dbl> <int> <int> <int>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nHowever, note that by default the date column is runed into type character.\r\nThe {rio} Package\r\nThe import() function from the {rio} package allows to load all kind of data formats:\r\n\r\n\r\n#install.packages(\"rio\")\r\n\r\ndata <- rio::import(here::here(\"data\", \"crypto_cleaned.csv\"))\r\n\r\nhead(data) ## use just head because the output is very long\r\n\r\n\r\n      currency       date  open  high   low close year month yday\r\n1 binance-coin 2019-12-04 15.35 15.69 15.01 15.28 2019    12  338\r\n2 binance-coin 2019-12-03 15.19 15.55 15.05 15.31 2019    12  337\r\n3 binance-coin 2019-12-02 15.51 15.71 15.15 15.19 2019    12  336\r\n4 binance-coin 2019-12-01 15.74 15.74 15.05 15.50 2019    12  335\r\n5 binance-coin 2019-11-30 16.26 16.37 15.54 15.72 2019    11  334\r\n6 binance-coin 2019-11-29 15.68 16.34 15.65 16.27 2019    11  333\r\n\r\nWe can turn it into a tibble afterwards—or specify it directly when importing the data set:\r\n\r\n\r\ndata <- rio::import(here::here(\"data\", \"crypto_cleaned.csv\"), setclass = \"tbl\")\r\n\r\ndata\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <int> <int> <int>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nYou could also load, for example, JSON or Excel files with the same function:\r\n\r\n\r\ndata_json <- rio::import(here::here(\"data\", \"crypto_cleaned.json\"))\r\n\r\ndata_json <- as_tibble(data_json) ## somehow `setclass` doesn't work with json\r\n\r\ndata_json\r\n\r\n\r\n# A tibble: 3,424 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <chr>      <dbl> <dbl> <dbl> <dbl> <int> <int> <int>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 3,414 more rows\r\n\r\n\r\n\r\ndata_xlsx <- rio::import(\r\n  here::here(\"data\", \"crypto_cleaned.xlsx\"),\r\n  setclass = \"tbl\"\r\n)\r\n\r\ndata_xlsx\r\n\r\n\r\n# A tibble: 2,812 x 10\r\n   ...1  currency    date                 open  high   low close  year\r\n   <chr> <chr>       <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 1     binance-co~ 2019-12-04 00:00:00  15.4  15.7  15.0  15.3  2019\r\n 2 2     binance-co~ 2019-12-03 00:00:00  15.2  15.6  15.0  15.3  2019\r\n 3 3     binance-co~ 2019-12-02 00:00:00  15.5  15.7  15.2  15.2  2019\r\n 4 4     binance-co~ 2019-12-01 00:00:00  15.7  15.7  15.0  15.5  2019\r\n 5 5     binance-co~ 2019-11-30 00:00:00  16.3  16.4  15.5  15.7  2019\r\n 6 6     binance-co~ 2019-11-29 00:00:00  15.7  16.3  15.6  16.3  2019\r\n 7 7     binance-co~ 2019-11-28 00:00:00  16.1  16.2  15.6  15.7  2019\r\n 8 8     binance-co~ 2019-11-27 00:00:00  15.5  16.2  14.9  16.1  2019\r\n 9 9     binance-co~ 2019-11-26 00:00:00  15.3  15.9  15.2  15.5  2019\r\n10 10    binance-co~ 2019-11-25 00:00:00  15.3  15.7  14.2  15.3  2019\r\n# ... with 2,802 more rows, and 2 more variables: month <dbl>,\r\n#   yday <dbl>\r\n\r\nWe can remove the first column by using the select() function from the {dplyr} package:\r\n\r\n\r\ndata_xlsx <- dplyr::select(data_xlsx, -1)\r\n#data_xlsx <- dplyr::select(data_xlsx, currency:yday)\r\n\r\ndata_xlsx\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency    date                 open  high   low close  year month\r\n   <chr>       <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-co~ 2019-12-04 00:00:00  15.4  15.7  15.0  15.3  2019    12\r\n 2 binance-co~ 2019-12-03 00:00:00  15.2  15.6  15.0  15.3  2019    12\r\n 3 binance-co~ 2019-12-02 00:00:00  15.5  15.7  15.2  15.2  2019    12\r\n 4 binance-co~ 2019-12-01 00:00:00  15.7  15.7  15.0  15.5  2019    12\r\n 5 binance-co~ 2019-11-30 00:00:00  16.3  16.4  15.5  15.7  2019    11\r\n 6 binance-co~ 2019-11-29 00:00:00  15.7  16.3  15.6  16.3  2019    11\r\n 7 binance-co~ 2019-11-28 00:00:00  16.1  16.2  15.6  15.7  2019    11\r\n 8 binance-co~ 2019-11-27 00:00:00  15.5  16.2  14.9  16.1  2019    11\r\n 9 binance-co~ 2019-11-26 00:00:00  15.3  15.9  15.2  15.5  2019    11\r\n10 binance-co~ 2019-11-25 00:00:00  15.3  15.7  14.2  15.3  2019    11\r\n# ... with 2,802 more rows, and 1 more variable: yday <dbl>\r\n\r\nAesthetics: aes()\r\nSome prefer to place the aes() outside the ggplot() call:\r\n\r\n\r\nggplot(data) +\r\n  aes(x = date, y = close)\r\n\r\n\r\n\r\n\r\nCoordinate Systems: coord_*()\r\nThe coordinate system maps the two position to a 2d position on the plot:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, \r\n                 color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete() +\r\n  coord_cartesian()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, \r\n                 color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete() +\r\n  coord_polar()\r\n\r\n\r\n\r\n\r\nChanging the limits on the coordinate system allows to zoom in:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, \r\n                 color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete() +\r\n  coord_cartesian(\r\n    xlim = c(as.Date(\"2018-11-01\"),\r\n             as.Date(\"2019-11-01\")),\r\n    ylim = c(NA, 100)\r\n  )\r\n\r\n\r\n\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-26 12:30:38 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [b3d54b9] 2021-08-17: update setup\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n[1] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.7     purrr_0.3.4    \r\n[5] readr_1.4.0     tidyr_1.1.3     tibble_3.1.2    ggplot2_3.3.5  \r\n[9] tidyverse_1.3.1\r\n\r\nloaded via a namespace (and not attached):\r\n [1] httr_1.4.2        sass_0.4.0        jsonlite_1.7.2   \r\n [4] here_1.0.1        modelr_0.1.8      bslib_0.2.5.1    \r\n [7] assertthat_0.2.1  highr_0.9         cellranger_1.1.0 \r\n[10] yaml_2.2.1        pillar_1.6.1      backports_1.2.1  \r\n[13] glue_1.4.2        digest_0.6.27     rvest_1.0.0      \r\n[16] colorspace_2.0-2  htmltools_0.5.1.1 pkgconfig_2.0.3  \r\n[19] broom_0.7.8       haven_2.4.1       scales_1.1.1     \r\n[22] openxlsx_4.2.4    distill_1.2       rio_0.5.27       \r\n[25] downlit_0.2.1     git2r_0.28.0      generics_0.1.0   \r\n[28] farver_2.1.0      ellipsis_0.3.2    withr_2.4.2      \r\n[31] cli_3.0.0         magrittr_2.0.1    crayon_1.4.1     \r\n[34] readxl_1.3.1      evaluate_0.14     fs_1.5.0         \r\n[37] fansi_0.5.0       xml2_1.3.2        foreign_0.8-81   \r\n[40] textshaping_0.3.5 tools_4.1.0       data.table_1.14.0\r\n[43] hms_1.1.0         lifecycle_1.0.0   munsell_0.5.0    \r\n[46] reprex_2.0.0      zip_2.2.0         compiler_4.1.0   \r\n[49] jquerylib_0.1.4   systemfonts_1.0.2 rlang_0.4.11     \r\n[52] grid_4.1.0        rstudioapi_0.13   labeling_0.4.2   \r\n[55] rmarkdown_2.9     gtable_0.3.0      DBI_1.1.1        \r\n[58] curl_4.3.2        R6_2.5.0          lubridate_1.7.10 \r\n[61] knitr_1.33        utf8_1.2.1        rprojroot_2.0.2  \r\n[64] ragg_1.1.3        stringi_1.7.3     Rcpp_1.0.7       \r\n[67] vctrs_0.3.8       dbplyr_2.1.1      tidyselect_1.1.1 \r\n[70] xfun_0.24        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-26T12:30:42+02:00"
    },
    {
      "path": "02-layers-rmarkdown.html",
      "title": "Segment 2: Build Plots Layer by Layer",
      "description": "Part 2 of the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly",
      "author": [
        {
          "name": "Cédric Scherer",
          "url": "https://cedricscherer.com"
        }
      ],
      "contents": "\r\n\r\nContents\r\nCreate Any Chart Type\r\nArea Charts\r\nBox Plots\r\nJitterstrips\r\nBarcode Plots\r\nHexagonal Bin Plot\r\nRectangular Bin Plot\r\nHeatmaps\r\n\r\nStatistical Transformations\r\nDraw Fittings\r\nCalculate Summaries\r\nDumbbell Plot\r\n\r\nStatistical Transformations: stat_*()\r\nExercise 1\r\nSpatial Maps\r\nSimple Features (Access)\r\nNatural Earth\r\nSetup\r\nGet the Data\r\nPlot the Map\r\nChange the Projection\r\n\r\nExercise 2\r\nResources\r\nAppendix\r\nCreate Any Chart Type\r\nStatistical Transformations\r\n\r\nSession Info\r\n\r\nCreate Any Chart Type\r\nAs you have already seen, we can quickly switch through different chart types:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line()\r\n\r\n\r\n\r\n\r\nArea Charts\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_area(aes(fill = currency), alpha = .5)\r\n\r\n\r\n\r\n\r\nMany of the geom’s can further adjusted:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_area(aes(fill = currency), alpha = .5, position = \"dodge\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_area(aes(fill = currency), alpha = .5, position = \"fill\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_area(aes(fill = currency), alpha = .5, position = \"fill\") +\r\n  coord_cartesian(expand = FALSE)\r\n\r\n\r\n\r\n\r\nBox Plots\r\nSome geom’s drastically change the appearance of the data:\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot()\r\n\r\n\r\n\r\n\r\nAnd, as you already know, we can combine geom’s to make the plot more insightful:\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot(outlier.alpha = 0, color = \"grey60\", size = 1) + \r\n  geom_point(alpha = .2)\r\n\r\n\r\n\r\n\r\nJitterstrips\r\nAnd also the point geom can be adjusted, e.g. adding some random noise called jitter:\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot(outlier.alpha = 0, color = \"grey60\", size = 1) + \r\n  geom_point(alpha = .2, position = position_jitter(height = .2))\r\n\r\n\r\n\r\n\r\nBarcode Plots\r\n… or converted to lines forming a barcode plot:\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot(outlier.alpha = 0, color = \"grey60\", size = 1) + \r\n  geom_point(alpha = .1, shape = \"|\", size = 9)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot(outlier.alpha = 0, width = .4, position = position_nudge(y = .2)) +\r\n  geom_point(alpha = .1, shape = \"|\", size = 9, position = position_nudge(y = -.2))\r\n\r\n\r\n\r\n\r\nHexagonal Bin Plot\r\nPlots that bin the data can be helpful to deal with overplotting:\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_point(alpha = .3)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_hex()\r\n\r\n\r\n\r\n\r\nLet’s add the diagonal to the plot:\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_abline(slope = 1, intercept = 0) +\r\n  geom_point(alpha = .3) +\r\n  coord_fixed()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_abline(slope = 1, intercept = 0) +\r\n  geom_hex() +\r\n  coord_fixed()\r\n\r\n\r\n\r\n\r\nRectangular Bin Plot\r\nIf you don’t like hexagonals, use rectangles!\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_abline(slope = 1, intercept = 0) +\r\n  geom_bin2d() +\r\n  coord_fixed()\r\n\r\n\r\n\r\n\r\nActually, the fill is mapped to a hidden summary statistic that is calculated by {ggplot2}:\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_abline(slope = 1, intercept = 0) +\r\n  geom_bin2d(aes(fill = ..count..)) +\r\n  coord_fixed()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_abline(slope = 1, intercept = 0) +\r\n  geom_bin2d(aes(fill = ..density..)) +\r\n  coord_fixed() \r\n\r\n\r\n\r\n\r\nHeatmaps\r\nWith geom_tile() one can create heatmaps:\r\n\r\n\r\nggplot(data, aes(date, currency, fill = close)) +\r\n  geom_tile()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, currency, fill = close)) +\r\n  geom_tile() +\r\n  coord_cartesian(expand = FALSE)\r\n\r\n\r\n\r\n\r\nStatistical Transformations\r\nDraw Fittings\r\nYou can directly add smoothed conditional means:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_point(size = .1) +\r\n  stat_smooth() \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_point(size = .1) +\r\n  stat_smooth() \r\n\r\n\r\n\r\n\r\nBy default this adds a LOESS (locally weighted scatter plot smoothing) or a GAM (generalized additive model) depending on the number of data points (GAM in case of ≥ 1000 observations).\r\nYou can specify the fitting method and the formula:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_point(size = .1) +\r\n  stat_smooth(method = \"lm\", formula = y ~ x + I(x^2) +  I(x^3) + I(x^4))\r\n\r\n\r\n\r\n\r\nOther methods such as method = “lm” (without an explicit formula) for simple linear regressions and method = “glm” for generalized linear models are available as well.\r\nCalculate Summaries\r\nWithout pre-calculations one can easily plot data summaries:\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary()\r\n\r\n\r\n\r\n\r\nYou can always go both ways — stat_x(geom = \"y\") == geom_y(stat = \"x\"):\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  stat_identity(geom = \"point\")\r\n\r\n\r\n\r\nggplot(data, aes(open, close)) +\r\n  geom_point(stat = \"identity\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(factor(month), close)) +\r\n  stat_summary(geom = \"pointrange\")\r\n\r\n\r\n\r\nggplot(data, aes(factor(month), close)) +\r\n  geom_pointrange(stat = \"summary\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    geom = \"pointrange\",\r\n    fun.data = \"mean_se\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    fun = function(x) mean(x),\r\n    fun.min = function(x) mean(x) - sd(x),\r\n    fun.max = function(x) mean(x) + sd(x)\r\n  ) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    fun = function(x) mean(x),\r\n    fun.min = function(x) mean(x) - sd(x),\r\n    fun.max = function(x) mean(x) + sd(x)\r\n  ) +\r\n  stat_summary(\r\n      geom = \"text\",\r\n      aes(label = round(..y.., 2))\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    fun = function(x) mean(x),\r\n    fun.min = function(x) mean(x) - sd(x),\r\n    fun.max = function(x) mean(x) + sd(x)\r\n  ) +\r\n  stat_summary(\r\n      geom = \"text\",\r\n      fun = function(x) mean(x),\r\n      aes(label = round(..y.., 2))\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    fun = function(x) mean(x),\r\n    fun.min = function(x) mean(x) - sd(x),\r\n    fun.max = function(x) mean(x) + sd(x)\r\n  ) +\r\n  stat_summary(\r\n      geom = \"text\",\r\n      fun = function(x) mean(x),\r\n      aes(label = round(..y.., 2)),\r\n      size = 5,\r\n      hjust = -.5\r\n  )\r\n\r\n\r\n\r\n\r\nDumbbell Plot\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    geom = \"linerange\",\r\n    fun.min = \"min\",\r\n    fun.max = \"max\"\r\n  ) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    geom = \"linerange\",\r\n    fun.min = \"min\",\r\n    fun.max = \"max\"\r\n  ) +\r\n  stat_summary(\r\n    fun = \"range\"\r\n  ) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(currency, close)) +\r\n  stat_summary(\r\n    geom = \"linerange\",\r\n    fun.min = \"min\",\r\n    fun.max = \"max\"\r\n  ) +\r\n  stat_summary(\r\n    fun = \"range\"\r\n  ) +\r\n  stat_summary(\r\n    fun = \"range\",\r\n    aes(label = round(..y.., 2)),\r\n    geom = \"text\",\r\n    size = 4,\r\n    hjust = 1,\r\n    position = position_nudge(x = -.08)\r\n  )\r\n\r\n\r\n\r\n\r\nStatistical Transformations: stat_*()\r\nThere are several other statistical transformations available:\r\nstat_count() to count observations (e.g. for bar charts)\r\nstat_bin() and stat_bin2d() to count observations per bin (e.g. for histograms)\r\nstat_density() and stat_density2d() to compute kernel density estimates (e.g. for density curves)\r\nstat_contour() and stat_contour_filled() to retrieve threshold levels (e.g. for contour maps)\r\nstat_function() to draw functions as a continuous curves\r\nstat_boxplot() to calculate the five summary statistics for a box plot\r\nstat_ydensity() to compute vertical density estimates (e.g. for violin plots)\r\nExercise 1\r\nImport the password data set: https://raw.githubusercontent.com/Z3tt/ggplot-courses/master/data/passwords.csv\r\nVisualize the number of passwords per category as bar chart.\r\nAdd to each bar a label of the number of passwords.\r\nclass: center, middle, inverse\r\nCollection of some chart types provided by ggplot2 extension packagesSpatial Maps\r\nSimple Features (Access)\r\nSimple features or simple features access refers to a formal standard (ISO 19125-1:2004) that describes how objects in the real world can be represented in computers, with emphasis on the spatial geometry.\r\n{sf} is an R package that provides simple features access for R.\r\nNatural Earth\r\nNatural Earth is a public domain map data set of physical and cultural features, available at 1:10m, 1:50m,and 1:110 million scales.\r\n{rnaturalearth} is an R package to hold and facilitate interaction with Natural Earth map data.\r\nSetup\r\n\r\n\r\n#install.packages(\"sf\")\r\nlibrary(sf)\r\n\r\n#install.packages(\"rnaturalearth\")\r\nlibrary(rnaturalearth)\r\n\r\n\r\n\r\nGet the Data\r\nThe {rnaturalearth} allows downloading the Natural Earth data sets in simple feature format.\r\n\r\n\r\nsf_world <- ne_countries(returnclass = \"sf\")\r\nsf_airports <- ne_download(scale = 'large', category = \"cultural\", type = \"airports\", returnclass = \"sf\")\r\n\r\n\r\nOGR data source with driver: ESRI Shapefile \r\nSource: \"C:\\Users\\DataVizard\\AppData\\Local\\Temp\\RtmpIB623p\", layer: \"ne_10m_airports\"\r\nwith 891 features\r\nIt has 35 fields\r\nInteger64 fields read as strings:  ne_id \r\n\r\ntibble::glimpse(sf_world)\r\n\r\n\r\nRows: 177\r\nColumns: 64\r\n$ scalerank  <int> 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1~\r\n$ featurecla <chr> \"Admin-0 country\", \"Admin-0 country\", \"Admin-0 co~\r\n$ labelrank  <dbl> 3, 3, 6, 4, 2, 6, 4, 6, 2, 4, 5, 6, 2, 5, 3, 3, 4~\r\n$ sovereignt <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ sov_a3     <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ adm0_dif   <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0~\r\n$ level      <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2~\r\n$ type       <chr> \"Sovereign country\", \"Sovereign country\", \"Sovere~\r\n$ admin      <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ adm0_a3    <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ geou_dif   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\r\n$ geounit    <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ gu_a3      <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ su_dif     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\r\n$ subunit    <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ su_a3      <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ brk_diff   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0~\r\n$ name       <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ name_long  <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ brk_a3     <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ brk_name   <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ brk_group  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ abbrev     <chr> \"Afg.\", \"Ang.\", \"Alb.\", \"U.A.E.\", \"Arg.\", \"Arm.\",~\r\n$ postal     <chr> \"AF\", \"AO\", \"AL\", \"AE\", \"AR\", \"ARM\", \"AQ\", \"TF\", ~\r\n$ formal_en  <chr> \"Islamic State of Afghanistan\", \"People's Republi~\r\n$ formal_fr  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ note_adm0  <chr> NA, NA, NA, NA, NA, NA, NA, \"Fr.\", NA, NA, NA, NA~\r\n$ note_brk   <chr> NA, NA, NA, NA, NA, NA, \"Multiple claims held in ~\r\n$ name_sort  <chr> \"Afghanistan\", \"Angola\", \"Albania\", \"United Arab ~\r\n$ name_alt   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ mapcolor7  <dbl> 5, 3, 1, 2, 3, 3, 4, 7, 1, 3, 1, 2, 3, 1, 2, 3, 4~\r\n$ mapcolor8  <dbl> 6, 2, 4, 1, 1, 1, 5, 5, 2, 1, 6, 2, 2, 2, 1, 4, 5~\r\n$ mapcolor9  <dbl> 8, 6, 1, 3, 3, 2, 1, 9, 2, 3, 5, 5, 1, 2, 5, 7, 1~\r\n$ mapcolor13 <dbl> 7, 1, 6, 3, 13, 10, NA, 11, 7, 4, 8, 8, 8, 12, 11~\r\n$ pop_est    <dbl> 28400000, 12799293, 3639453, 4798491, 40913584, 2~\r\n$ gdp_md_est <dbl> 22270.0, 110300.0, 21810.0, 184300.0, 573900.0, 1~\r\n$ pop_year   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ lastcensus <dbl> 1979, 1970, 2001, 2010, 2010, 2001, NA, NA, 2006,~\r\n$ gdp_year   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ economy    <chr> \"7. Least developed region\", \"7. Least developed ~\r\n$ income_grp <chr> \"5. Low income\", \"3. Upper middle income\", \"4. Lo~\r\n$ wikipedia  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ fips_10    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ iso_a2     <chr> \"AF\", \"AO\", \"AL\", \"AE\", \"AR\", \"AM\", \"AQ\", \"TF\", \"~\r\n$ iso_a3     <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ iso_n3     <chr> \"004\", \"024\", \"008\", \"784\", \"032\", \"051\", \"010\", ~\r\n$ un_a3      <chr> \"004\", \"024\", \"008\", \"784\", \"032\", \"051\", NA, NA,~\r\n$ wb_a2      <chr> \"AF\", \"AO\", \"AL\", \"AE\", \"AR\", \"AM\", NA, NA, \"AU\",~\r\n$ wb_a3      <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", NA, NA,~\r\n$ woe_id     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ adm0_a3_is <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ adm0_a3_us <chr> \"AFG\", \"AGO\", \"ALB\", \"ARE\", \"ARG\", \"ARM\", \"ATA\", ~\r\n$ adm0_a3_un <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ adm0_a3_wb <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N~\r\n$ continent  <chr> \"Asia\", \"Africa\", \"Europe\", \"Asia\", \"South Americ~\r\n$ region_un  <chr> \"Asia\", \"Africa\", \"Europe\", \"Asia\", \"Americas\", \"~\r\n$ subregion  <chr> \"Southern Asia\", \"Middle Africa\", \"Southern Europ~\r\n$ region_wb  <chr> \"South Asia\", \"Sub-Saharan Africa\", \"Europe & Cen~\r\n$ name_len   <dbl> 11, 6, 7, 20, 9, 7, 10, 22, 9, 7, 10, 7, 7, 5, 12~\r\n$ long_len   <dbl> 11, 6, 7, 20, 9, 7, 10, 35, 9, 7, 10, 7, 7, 5, 12~\r\n$ abbrev_len <dbl> 4, 4, 4, 6, 4, 4, 4, 10, 4, 5, 4, 4, 5, 5, 4, 5, ~\r\n$ tiny       <dbl> NA, NA, NA, NA, NA, NA, NA, 2, NA, NA, NA, NA, NA~\r\n$ homepart   <dbl> 1, 1, 1, 1, 1, 1, 1, NA, 1, 1, 1, 1, 1, 1, 1, 1, ~\r\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((61.21082 35..., MULT~\r\n\r\nPlot the Map\r\n{ggplot2} comes with a set of geom, stat, and coord are used to visualize sf objects.\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf()\r\n\r\n\r\n\r\n\r\ngeom_sf() works with all types of vector data and returns geometries depending on the simple features:\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf() +\r\n  geom_sf(data = sf_airports)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(color = \"forestgreen\", alpha = .4) +\r\n  geom_sf(data = sf_airports, color = \"purple\", alpha = .4)\r\n\r\n\r\n\r\n\r\nGenerate simple features objects e.g. to highlight a location:\r\n\r\n\r\nsf_bln <- sf::st_sfc(sf::st_point(c(13.4050, 52.5200)), crs = sf::st_crs(sf_world))\r\n\r\nsf_bln\r\n\r\n\r\nGeometry set for 1 feature \r\nGeometry type: POINT\r\nDimension:     XY\r\nBounding box:  xmin: 13.405 ymin: 52.52 xmax: 13.405 ymax: 52.52\r\nCRS:           +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(color = NA) +\r\n  geom_sf(data = sf_bln, shape = 21, color = \"firebrick\", fill = NA, size = 5, stroke = 2)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(color = \"forestgreen\", fill = \"forestgreen\", alpha = .4)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = economy))\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = economy), color = \"white\", size = .2)\r\n\r\n\r\n\r\n\r\nChange the Projection\r\nUse coord_sf() to change the projection without changing the spatial data set!\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = economy), color = \"white\", size = .2) +\r\n  coord_sf(crs = \"+proj=moll\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = economy), color = \"white\", size = .2) +\r\n  coord_sf(crs = \"+proj=laea +x_0=0 +y_0=0 +lon_0=0 +lat_0=0\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = economy), color = \"white\", size = .2) +\r\n  coord_sf(crs = \"+proj=laea +x_0=0 +y_0=0 +lon_0=-30 +lat_0=-25\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = economy), color = \"white\", size = .2) +\r\n  coord_sf(crs = \"+proj=laea +x_0=0 +y_0=0 +lon_0=-70 +lat_0=0\")\r\n\r\n\r\n\r\n\r\nExercise 2\r\nDownload data set(s) for your home country and plot it/them.\r\nChange the projection with coord_sf and observe how the spatial mapping changes.\r\nResources\r\nChapters on individual geom’s, collective geom’s, statistical summaries, and mapsof the “ggplot2” book by Hadley Wickham et al.\r\nOverview of layers contained in the {ggplot2} package\r\nR Graph Gallery that provides hundreds of charts with their reproducible code\r\nList of {ggplot2} extension packages\r\n“Geocomputation with R”, free-access book by Robin Lovelace et al.\r\n{sf} package page\r\nStackOverflow discussion and code to plot a true globe\r\n“A {ggplot2} Tutorial for Beautiful Plotting in R”, my extensive “how to”-tutorial\r\nAppendix\r\nCreate Any Chart Type\r\nCandlestick Charts\r\nThere is a package for that — but it’s simple enough to do it manually!\r\n\r\n\r\nggplot(filter(data, year == 2019, month > 9), aes(date, close)) +\r\n  geom_linerange(aes(ymin = low, ymax = high), size = 1)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(filter(data, year == 2019, month > 9), aes(date, close)) +\r\n  geom_linerange(aes(ymin = low, ymax = high), size = 1) +\r\n  geom_linerange(aes(ymin = open, ymax = close), size = 5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(filter(data, year == 2019, month > 9), aes(date, close)) +\r\n  geom_linerange(aes(ymin = low, ymax = high, color = close > open), size = 1) +\r\n  geom_linerange(aes(ymin = open, ymax = close, color = close > open), size = 5)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(filter(data, year == 2019, month > 9), aes(date, close)) +\r\n  geom_linerange(aes(ymin = low, ymax = high, color = close > open), size = 1) + \r\n  geom_linerange(aes(ymin = open, ymax = close, color = close > open), size = 5) +\r\n  scale_x_date(date_labels = \"%b %d, %Y\")\r\n\r\n\r\n\r\n\r\nStatistical Transformations\r\nDraw Functions\r\nstat_function() makes it easy to add a function to a plot, either continuous or discrete:\r\n\r\n\r\nggplot(tibble(x = c(-8, 8)), aes(x)) +\r\n  stat_function(fun = dnorm) +\r\n  stat_function(\r\n    fun = dcauchy,\r\n    color = \"red\",\r\n    n = 75\r\n  ) \r\n\r\n\r\n\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-17 16:19:31 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [f9352e7] 2021-08-17: build page\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n [1] rnaturalearth_0.1.0 sf_1.0-1            forcats_0.5.1      \r\n [4] stringr_1.4.0       dplyr_1.0.7         purrr_0.3.4        \r\n [7] readr_1.4.0         tidyr_1.1.3         tibble_3.1.2       \r\n[10] ggplot2_3.3.5       tidyverse_1.3.1    \r\n\r\nloaded via a namespace (and not attached):\r\n [1] nlme_3.1-152       fs_1.5.0           lubridate_1.7.10  \r\n [4] httr_1.4.2         rprojroot_2.0.2    tools_4.1.0       \r\n [7] backports_1.2.1    bslib_0.2.5.1      rgdal_1.5-23      \r\n[10] utf8_1.2.1         R6_2.5.0           KernSmooth_2.23-20\r\n[13] rgeos_0.5-5        DBI_1.1.1          mgcv_1.8-35       \r\n[16] colorspace_2.0-2   sp_1.4-5           withr_2.4.2       \r\n[19] tidyselect_1.1.1   downlit_0.2.1      curl_4.3.2        \r\n[22] compiler_4.1.0     git2r_0.28.0       textshaping_0.3.5 \r\n[25] cli_3.0.0          rvest_1.0.0        xml2_1.3.2        \r\n[28] labeling_0.4.2     bookdown_0.22      sass_0.4.0        \r\n[31] scales_1.1.1       classInt_0.4-3     hexbin_1.28.2     \r\n[34] proxy_0.4-26       systemfonts_1.0.2  digest_0.6.27     \r\n[37] foreign_0.8-81     rmarkdown_2.9      rio_0.5.27        \r\n[40] pkgconfig_2.0.3    htmltools_0.5.1.1  dbplyr_2.1.1      \r\n[43] highr_0.9          rlang_0.4.11       readxl_1.3.1      \r\n[46] rstudioapi_0.13    jquerylib_0.1.4    farver_2.1.0      \r\n[49] generics_0.1.0     jsonlite_1.7.2     zip_2.2.0         \r\n[52] distill_1.2        magrittr_2.0.1     s2_1.0.6          \r\n[55] Matrix_1.3-3       Rcpp_1.0.7         munsell_0.5.0     \r\n[58] fansi_0.5.0        lifecycle_1.0.0    stringi_1.7.3     \r\n[61] yaml_2.2.1         grid_4.1.0         crayon_1.4.1      \r\n[64] lattice_0.20-44    haven_2.4.1        splines_4.1.0     \r\n[67] hms_1.1.0          knitr_1.33         pillar_1.6.1      \r\n[70] wk_0.5.0           reprex_2.0.0       glue_1.4.2        \r\n[73] evaluate_0.14      data.table_1.14.0  modelr_0.1.8      \r\n[76] vctrs_0.3.8        cellranger_1.1.0   gtable_0.3.0      \r\n[79] assertthat_0.2.1   xfun_0.24          openxlsx_4.2.4    \r\n[82] broom_0.7.8        e1071_1.7-7        class_7.3-19      \r\n[85] ragg_1.1.3         units_0.7-2        ellipsis_0.3.2    \r\n[88] here_1.0.1        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T16:19:32+02:00"
    },
    {
      "path": "03-polish-rmarkdown.html",
      "title": "Segment 3: Provide Context with Annotations",
      "description": "Part 3 of the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly",
      "author": [
        {
          "name": "Cédric Scherer",
          "url": "https://cedricscherer.com"
        }
      ],
      "contents": "\r\n\r\nContents\r\nAdjust Colors and Other aesthetics\r\nScales: scale_*()\r\nScales: scale_color_*()\r\nScales: scale_color_viridis_*()\r\nScales: scale_color_brewer_*()\r\nExercise 1\r\nScales: scale_fill_gradient()`\r\nScales: scale_fill_gradient2()`\r\nColor Palettes in R\r\n\r\nA ggplot Object\r\nLegends (Guides)\r\nStyle Legends: guides()\r\n\r\nExercise 2\r\nStyle Legends: theme()\r\n\r\nTemplate and Custom Theming\r\nThemes: theme_*()\r\ntheme() Arguments\r\n\r\nExercise 3\r\nResources\r\nSession Info\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\ntheme_set(theme_light(base_size = 18))\r\ndata <- readr::read_csv(\"https://raw.githubusercontent.com/z3tt/hands-on-ggplot2/main/data/crypto_cleaned.csv\")\r\n\r\n\r\n\r\nAdjust Colors and Other aesthetics\r\nOne can use scale_*() to change properties of all the aesthetic dimensions mapped to the data.\r\nConsequently, there are scale_*() functions for all aesthetics such as:\r\npositions via scale_x_*() and scale_y_*()\r\ncolors via scale_color_*() and scale_fill_*()\r\nsizes via scale_size_*() and scale_radius_*()\r\nshapes via scale_shape_*() and scale_linetype_*()\r\ntransparency via scale_alpha_*()\r\nThe extensions (*) can be filled by e.g.:\r\ncontinuous(), discrete(), reverse(), log10(), sqrt(), date() for positions\r\ncontinuous(), discrete(), manual(), gradient(), gradient2(), brewer() for colors\r\ncontinuous(), discrete(), manual(), ordinal(), area(), date() for sizes\r\ncontinuous(), discrete(), manual(), ordinal() for shapes\r\ncontinuous(), discrete(), manual(), ordinal(), date() for transparency\r\nScales: scale_*()\r\nScales are directly connected to aesthetics:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete()\r\n\r\n\r\n\r\n\r\nAll scales come with some general and specific arguments to change the appearance:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_x_date(\r\n    expand = c(0, 0), ## general\r\n    date_breaks = \"4 months\", ## date-only \r\n    date_labels = \"%m/%y\", ## date only\r\n    name = NULL ## general \r\n  ) +\r\n  scale_y_continuous() +  \r\n  scale_color_discrete() \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_x_date(\r\n    expand = c(0, 0), ## general\r\n    date_breaks = \"4 months\", ## date-only  \r\n    date_labels = \"%m/%y\", ## date only\r\n    name = NULL ## general \r\n  ) +\r\n  scale_y_continuous(\r\n    labels = scales::dollar_format(), ## general \r\n    sec.axis = dup_axis(name = NULL), ## axis only\r\n    name = \"Closing Price\" ## general \r\n  ) + \r\n  scale_color_discrete()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_x_date(\r\n    expand = c(0, 0), ## general \r\n    date_breaks = \"4 months\", ## date-only \r\n    date_labels = \"%m/%y\", ## date only \r\n    name = NULL ## general \r\n  ) +\r\n  scale_y_continuous(\r\n    labels = scales::dollar_format(), ## general  \r\n    sec.axis = dup_axis(name = NULL), ## axis only \r\n    name = \"Closing Price\" ## general \r\n  ) + \r\n  scale_color_discrete(\r\n    type = c(\"#F0B90B\", \"#4d4d4e\", \"#810080\", \"#00aeff\"),  ## color only\r\n    name = \"Cryptocurrency:\" ## general \r\n  )\r\n\r\n\r\n\r\n\r\nIllustration by Allison HorstColor palette typesScales: scale_color_*()\r\nAll colors and fills that are mapped to categorical variables can be manipulated with either scale_color|fill_discrete() or scale_color|fill_manual().\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_color_discrete(type = c(\"#F0B90B\", \"#4d4d4e\",\"#810080\", \"#00aeff\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_color_manual(values = c(\"#F0B90B\", \"#4d4d4e\", \"#810080\", \"#00aeff\"))\r\n\r\n\r\n\r\n\r\nHere, you can overwrite the labels of your legend items—no need to manipulate the data itself!\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_color_manual(\r\n    values = c(\"#F0B90B\", \"#4d4d4e\", \"#810080\", \"#00aeff\"),\r\n    labels = c(\"Binance\", \"Bitcoin\", \"EOS\", \"Litecoin\"),\r\n    name = \"Cryptocurrency:\" \r\n  )\r\n\r\n\r\n\r\n\r\nComparison of continuous color palettes, taken from the {viridis} package referenceThe same collection of palettes for diferent color vision deficienciesThere are a few and well crafted built-in palettes you can use as well (the defaults are pretty bad).\r\nScales: scale_color_viridis_*()\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_color_viridis_d()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  scale_color_viridis_d(\r\n    option = \"turbo\",\r\n    begin = .1,\r\n    end = .9,\r\n    name = \"Cryptocurrency:\"\r\n  )\r\n\r\n\r\n\r\n\r\nColor palettes contained in the latest version of the {viridis} package, taken from the {viridis} package referenceThe viridis palettes are more suitable for continuous data:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = yday, group = currency)) +\r\n  geom_line() +\r\n  scale_color_viridis_c(\r\n    option = \"turbo\",\r\n    begin = .1,\r\n    end = .9, \r\n    name = \"Julian Day:\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = open, group = currency)) +\r\n  geom_point() +\r\n  scale_color_viridis_c(\r\n    option = \"rocket\",\r\n    direction = -1,\r\n    end = .9,\r\n    labels = scales::dollar_format(),\r\n    name = \"Julian Day:\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = open, group = currency)) +\r\n  geom_point() +\r\n  scale_color_viridis_c(\r\n    option = \"rocket\",\r\n    direction = -1, \r\n    end = .9,\r\n    breaks = seq(50, 300, by = 100),\r\n    labels = scales::dollar_format(), \r\n    name = \"Julian Day:\"\r\n  )\r\n\r\n\r\n\r\n\r\nScales: scale_color_brewer_*()\r\nColorbrewer provides color schemes for maps.\r\n\r\n\r\nRColorBrewer::display.brewer.all()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n    geom_line() +\r\n    scale_color_brewer(\r\n        palette = \"Set2\",\r\n        name = \"Cryptocurrency:\"\r\n    )\r\n\r\n\r\n\r\n\r\nExercise 1\r\nColorbrewer provides color schemes for maps.\r\nDownload the country data set from {rnaturalearth}.\r\nsee segment 2 if you don’t remember how\r\n\r\nVisualize the economy classes (economy) as a choropleth map and use one of the categorical colorbrewer palettes.\r\nNow change the code so the fill colors encode the estimated population (pop_est).\r\nWhat’s the problem? How can you fix it?\r\nTip: Have a look at the note and examples on the help page: ?scale_fill_brewer\r\n\r\nScales: scale_fill_gradient()`\r\nYou can also build your own sequential color palettes:\r\n\r\n\r\nsf_world <- rnaturalearth::ne_countries(returnclass = \"sf\")\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = pop_est), color = NA) + \r\n  scale_fill_gradient(low = \"grey90\", high = \"firebrick4\") +\r\n  coord_sf(crs = \"+proj=moll\")\r\n\r\n\r\n\r\n\r\nScales: scale_fill_gradient2()`\r\nYou can also build your own diverging color palettes:\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = as.numeric(factor(income_grp))), color = NA) +\r\n  scale_fill_gradient2(low = \"firebrick4\", high = \"darkcyan\", mid = \"grey90\", name = \"Income group:\") +\r\n  coord_sf(crs = \"+proj=moll\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(sf_world) +\r\n  geom_sf(aes(fill = as.numeric(factor(income_grp))), color = NA) +\r\n  scale_fill_gradient2(low = \"firebrick4\", high = \"darkcyan\", mid = \"grey90\", name = \"Income group:\", \r\n                       midpoint = 3) +\r\n  coord_sf(crs = \"+proj=moll\")\r\n\r\n\r\n\r\n\r\nColor Palettes in R\r\nSeveral packages offer predefined palettes, e.g.:\r\n{viridis} for perceptually uniform palettes\r\n{scico} for more perceptually uniform palettes\r\n{rcartocolor} for map color palettes\r\n{ggsci} for scientific journal and sci-fi themed color\r\n{ggthemes} for colors of popular software & publishers\r\n{LaCroixColoR} for vibrant summery colors\r\nCheck the collection by Emil Hvitfeldt for an extensive list of color palettes available in R\r\nA ggplot Object\r\nBy the way, you can store ggplots in objects and extend them later:\r\n\r\n\r\ng <- ggplot(sf_world) +\r\n  geom_sf(aes(fill = as.numeric(factor(income_grp))), color = NA) +\r\n  scale_fill_gradient2(low = \"firebrick4\", high = \"darkcyan\", mid = \"grey90\", name = \"Income group:\", \r\n                       midpoint = 3) +\r\n  coord_sf(crs = \"+proj=moll\")\r\n\r\nclass(g)\r\n\r\n\r\n[1] \"gg\"     \"ggplot\"\r\n\r\nLegends (Guides)\r\nStyle Legends: guides()\r\nThe guides() function allows to adjust the appearance of each legend:\r\n\r\n\r\ng +\r\n  guides(fill = guide_colorbar())\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  guides(fill = guide_legend())\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  guides(fill = guide_legend(reverse = TRUE))\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  guides(fill = guide_legend(reverse = TRUE, keyheight = unit(2, \"lines\")))\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  guides(fill = guide_colorbar(barheight = unit(12, \"lines\"),\r\n                               barwidth = unit(1, \"lines\")))\r\n\r\n\r\n\r\n\r\nExercise 2\r\nCreate the following visualization with a viridis palette: \r\nStyle Legends: theme()\r\nThe position of the legend and some other properties can be changed via theme():\r\n\r\n\r\ng +\r\n  guides(fill = guide_legend()) +\r\n  theme(legend.position = \"top\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  guides(fill = guide_legend()) +\r\n  theme(legend.position = \"top\", legend.key.height = unit(.5, \"lines\"),\r\n        legend.key.width = unit(4, \"lines\"))\r\n\r\n\r\n\r\n\r\nYou can change the position of the legend title and labels in guides():\r\n\r\n\r\ng +\r\n  guides(fill = guide_legend(title.position = \"top\", title.hjust = .5, label.position = \"bottom\")) +\r\n  theme(legend.position = \"top\", legend.key.height = unit(.5, \"lines\"),\r\n        legend.key.width = unit(4, \"lines\")) \r\n\r\n\r\n\r\n\r\nTemplate and Custom Theming\r\nThemes: theme_*()\r\nYou have already seen built-in themes in segment 1:\r\n\r\n\r\ngg <- ggplot(data, aes(x = date, y = close, color = currency)) +\r\n       geom_line(size = 1.5)\r\n\r\ngg +\r\n  theme_grey() +\r\n  ggtitle(\"theme_grey()  or  theme_gray()\") \r\n\r\n\r\n\r\ngg +\r\n  theme_classic() +\r\n  ggtitle(\"theme_classic()\") \r\n\r\n\r\n\r\ngg +\r\n  theme_bw() +\r\n  ggtitle(\"theme_bw()\") \r\n\r\n\r\n\r\ngg +\r\n  theme_light() +\r\n  ggtitle(\"theme_light()\")\r\n\r\n\r\n\r\ngg +\r\n  theme_minimal() +\r\n  ggtitle(\"theme_minimal()\") \r\n\r\n\r\n\r\ngg +\r\n  theme_dark() +\r\n  ggtitle(\"theme_dark()\") \r\n\r\n\r\n\r\ngg +\r\n  theme_linedraw() +\r\n  ggtitle(\"theme_linedraw()\")\r\n\r\n\r\n\r\ngg +\r\n  theme_void() +\r\n  ggtitle(\"theme_void()\") \r\n\r\n\r\n\r\n\r\nYou can either add theme changes to each plot or globally for all plots:\r\n\r\n\r\nggplot(data, aes(x = date, y = close)) +\r\n  geom_line(aes(color = currency)) + \r\n  theme_classic(base_size = 16)\r\n\r\n\r\n\r\n\r\n\r\n\r\ntheme_set(theme_classic(base_size = 16))\r\nggplot(data, aes(x = date, y = close)) +\r\n  geom_line(aes(color = currency))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ntheme_grey\r\n\r\n\r\nfunction (base_size = 11, base_family = \"\", base_line_size = base_size/22, \r\n    base_rect_size = base_size/22) \r\n{\r\n    half_line <- base_size/2\r\n    t <- theme(line = element_line(colour = \"black\", size = base_line_size, \r\n        linetype = 1, lineend = \"butt\"), rect = element_rect(fill = \"white\", \r\n        colour = \"black\", size = base_rect_size, linetype = 1), \r\n        text = element_text(family = base_family, face = \"plain\", \r\n            colour = \"black\", size = base_size, lineheight = 0.9, \r\n            hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), \r\n            debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, \r\n        axis.line.y = NULL, axis.text = element_text(size = rel(0.8), \r\n            colour = \"grey30\"), axis.text.x = element_text(margin = margin(t = 0.8 * \r\n            half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * \r\n            half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * \r\n            half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * \r\n            half_line/2), hjust = 0), axis.ticks = element_line(colour = \"grey20\"), \r\n        axis.ticks.length = unit(half_line/2, \"pt\"), axis.ticks.length.x = NULL, \r\n        axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, \r\n        axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, \r\n        axis.ticks.length.y.right = NULL, axis.title.x = element_text(margin = margin(t = half_line/2), \r\n            vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line/2), \r\n            vjust = 0), axis.title.y = element_text(angle = 90, \r\n            margin = margin(r = half_line/2), vjust = 1), axis.title.y.right = element_text(angle = -90, \r\n            margin = margin(l = half_line/2), vjust = 0), legend.background = element_rect(colour = NA), \r\n        legend.spacing = unit(2 * half_line, \"pt\"), legend.spacing.x = NULL, \r\n        legend.spacing.y = NULL, legend.margin = margin(half_line, \r\n            half_line, half_line, half_line), legend.key = element_rect(fill = \"grey95\", \r\n            colour = NA), legend.key.size = unit(1.2, \"lines\"), \r\n        legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), \r\n        legend.text.align = NULL, legend.title = element_text(hjust = 0), \r\n        legend.title.align = NULL, legend.position = \"right\", \r\n        legend.direction = NULL, legend.justification = \"center\", \r\n        legend.box = NULL, legend.box.margin = margin(0, 0, 0, \r\n            0, \"cm\"), legend.box.background = element_blank(), \r\n        legend.box.spacing = unit(2 * half_line, \"pt\"), panel.background = element_rect(fill = \"grey92\", \r\n            colour = NA), panel.border = element_blank(), panel.grid = element_line(colour = \"white\"), \r\n        panel.grid.minor = element_line(size = rel(0.5)), panel.spacing = unit(half_line, \r\n            \"pt\"), panel.spacing.x = NULL, panel.spacing.y = NULL, \r\n        panel.ontop = FALSE, strip.background = element_rect(fill = \"grey85\", \r\n            colour = NA), strip.text = element_text(colour = \"grey10\", \r\n            size = rel(0.8), margin = margin(0.8 * half_line, \r\n                0.8 * half_line, 0.8 * half_line, 0.8 * half_line)), \r\n        strip.text.x = NULL, strip.text.y = element_text(angle = -90), \r\n        strip.text.y.left = element_text(angle = 90), strip.placement = \"inside\", \r\n        strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(half_line/2, \r\n            \"pt\"), strip.switch.pad.wrap = unit(half_line/2, \r\n            \"pt\"), plot.background = element_rect(colour = \"white\"), \r\n        plot.title = element_text(size = rel(1.2), hjust = 0, \r\n            vjust = 1, margin = margin(b = half_line)), plot.title.position = \"panel\", \r\n        plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)), \r\n        plot.caption = element_text(size = rel(0.8), hjust = 1, \r\n            vjust = 1, margin = margin(t = half_line)), plot.caption.position = \"panel\", \r\n        plot.tag = element_text(size = rel(1.2), hjust = 0.5, \r\n            vjust = 0.5), plot.tag.position = \"topleft\", plot.margin = margin(half_line, \r\n            half_line, half_line, half_line), complete = TRUE)\r\n    ggplot_global$theme_all_null %+replace% t\r\n}\r\n<bytecode: 0x000000001313d4c0>\r\n<environment: namespace:ggplot2>\r\n\r\ntheme() Arguments\r\nThere are many elements you can customize. You can either group them by their type or by their category:\r\nelement types:\r\ntext → all labels, axis text, legend title and text\r\nline → axis lines, ticks, grid lines\r\nrect → plot area, panel area, legend and legend keys, facets\r\n\r\nelement category:\r\naxis.* → titles, text, ticks, lines\r\nlegend.* → background, margin, spacing, keys, text, title, position, direction, box\r\npanel.* → background, border, margin, spacing, grid (major and minor)\r\nplot.* → background, title, subtitle, caption, tag, margin\r\nstrip.* → background, placement, text\r\n\r\nYou can directly alter the appearance by adding theme() to a ggplot.\r\nRectangular Elements via element_rect()\r\nTheme components that are element_rect (Part 1)Theme components that are element_rect (Part 2)\r\n\r\ng +\r\n  theme(plot.background = element_rect(\r\n    color = \"black\",\r\n    fill = \"orange\",\r\n    size = 2,\r\n    linetype = \"dotted\"\r\n  ))\r\n\r\n\r\n\r\n\r\nLine Elements via element_line()\r\nTheme components that are element_line\r\n\r\ng +\r\n  theme(panel.grid = element_line(\r\n    color = \"black\",\r\n    size = 3,\r\n    linetype = \"dashed\",\r\n    lineend = \"square\", # round, butt\r\n    arrow = arrow(angle = 30, length = unit(0.25, \"inches\"))\r\n  ))\r\n\r\n\r\n\r\n\r\nText Elements via element_text()\r\nTheme components that are element_text\r\n\r\ng +\r\n  ggtitle(\"My New\\nTitle\") +\r\n  theme(plot.title = element_text(\r\n    #family = \"Roboto\", ## you need {systemfonts} for this\r\n    face = \"bold\", ## plain, italic, bolditalic\r\n    size = 24,\r\n    color = \"firebrick\",\r\n    lineheight = .7,\r\n    angle = 180,\r\n    hjust = .5,\r\n    vjust = .0,\r\n    margin = margin(\r\n      10, ## t (top)\r\n      0,  ## r (right)\r\n      30, ## b (bottom)\r\n      0   ## l (left)\r\n    )\r\n  ))\r\n\r\n\r\n\r\n\r\nExercise 3\r\nHave a closer look at the codes of theme_grey/theme_gray and one of the other themes. What’s the difference?\r\nCreate a theme that is as ugly as possible!\r\nor:\r\nCreate a theme that you can use ass personal theme.\r\nApply it to a plot.\r\nResources\r\nModify theme components on the ggplot reference page\r\nChapter 19 Themes of the “ggplot2” book by Hadley Wickham et al.\r\n“Creating and Using Custom ggplot2 Themes”, blog post by Thomas Mock\r\n“Themes to Improve Your ggplot Figures” from R for the Rest of Us with a collection of additional themes\r\n“A {ggplot2} Tutorial for Beautiful Plotting in R”, my extensive “how to”-tutorial\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-17 16:20:01 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [f9352e7] 2021-08-17: build page\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n [1] rnaturalearth_0.1.0 sf_1.0-1            forcats_0.5.1      \r\n [4] stringr_1.4.0       dplyr_1.0.7         purrr_0.3.4        \r\n [7] readr_1.4.0         tidyr_1.1.3         tibble_3.1.2       \r\n[10] ggplot2_3.3.5       tidyverse_1.3.1    \r\n\r\nloaded via a namespace (and not attached):\r\n [1] nlme_3.1-152       fs_1.5.0           lubridate_1.7.10  \r\n [4] RColorBrewer_1.1-2 httr_1.4.2         rprojroot_2.0.2   \r\n [7] tools_4.1.0        backports_1.2.1    bslib_0.2.5.1     \r\n[10] rgdal_1.5-23       utf8_1.2.1         R6_2.5.0          \r\n[13] KernSmooth_2.23-20 rgeos_0.5-5        DBI_1.1.1         \r\n[16] mgcv_1.8-35        colorspace_2.0-2   sp_1.4-5          \r\n[19] withr_2.4.2        tidyselect_1.1.1   downlit_0.2.1     \r\n[22] curl_4.3.2         compiler_4.1.0     git2r_0.28.0      \r\n[25] textshaping_0.3.5  cli_3.0.0          rvest_1.0.0       \r\n[28] xml2_1.3.2         labeling_0.4.2     bookdown_0.22     \r\n[31] sass_0.4.0         scales_1.1.1       classInt_0.4-3    \r\n[34] hexbin_1.28.2      proxy_0.4-26       systemfonts_1.0.2 \r\n[37] digest_0.6.27      foreign_0.8-81     rmarkdown_2.9     \r\n[40] rio_0.5.27         pkgconfig_2.0.3    htmltools_0.5.1.1 \r\n[43] dbplyr_2.1.1       highr_0.9          rlang_0.4.11      \r\n[46] readxl_1.3.1       rstudioapi_0.13    jquerylib_0.1.4   \r\n[49] farver_2.1.0       generics_0.1.0     jsonlite_1.7.2    \r\n[52] zip_2.2.0          distill_1.2        magrittr_2.0.1    \r\n[55] s2_1.0.6           Matrix_1.3-3       Rcpp_1.0.7        \r\n[58] munsell_0.5.0      fansi_0.5.0        lifecycle_1.0.0   \r\n[61] stringi_1.7.3      yaml_2.2.1         grid_4.1.0        \r\n[64] crayon_1.4.1       lattice_0.20-44    haven_2.4.1       \r\n[67] splines_4.1.0      hms_1.1.0          knitr_1.33        \r\n[70] pillar_1.6.1       wk_0.5.0           reprex_2.0.0      \r\n[73] glue_1.4.2         evaluate_0.14      data.table_1.14.0 \r\n[76] modelr_0.1.8       vctrs_0.3.8        cellranger_1.1.0  \r\n[79] gtable_0.3.0       assertthat_0.2.1   xfun_0.24         \r\n[82] openxlsx_4.2.4     broom_0.7.8        e1071_1.7-7       \r\n[85] viridisLite_0.4.0  class_7.3-19       ragg_1.1.3        \r\n[88] units_0.7-2        ellipsis_0.3.2     here_1.0.1        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T16:20:03+02:00"
    },
    {
      "path": "04-annotation-rmarkdown.html",
      "title": "Segment 4: Provide Context with Annotations",
      "description": "Part 3 of the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly",
      "author": [
        {
          "name": "Cédric Scherer",
          "url": "https://cedricscherer.com"
        }
      ],
      "contents": "\r\n\r\nContents\r\nTitles, Labels & Co\r\nLabels: labs()\r\nPlot Position\r\nText Rendering with {ggtext}\r\n\r\nBasic Text Labelling\r\nAnnotations via annotate()\r\n\r\nExercise 1:\r\nAnnotations via geom_text|label()\r\n\r\nAdvanced Text Labelling\r\nAnnotations via geom\\_text|label\\_repel()\r\n\r\nAnnotations via geom\\_mark\\_*()\r\nAdd Images\r\nAdd Images via annotation_custom()\r\nAdd Images with the {cowplot}Package\r\n\r\nExercise 2:\r\nResources\r\nAppendix\r\nAnnotations with {ggtext}\r\n\r\nSession Info\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\ntheme_set(theme_light(base_size = 18))\r\ndata <- readr::read_csv(\"https://raw.githubusercontent.com/z3tt/hands-on-ggplot2/main/data/crypto_cleaned.csv\")\r\n\r\n\r\n\r\nTitles, Labels & Co\r\nLabels: labs()\r\nTo change the labels and add a title, a subtitle, a caption and/or a tag, use labs():\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(x = NULL, y = \"Closing Price\", color = \"Cryptocurrency:\")\r\n\r\n\r\n\r\n\r\nThere are multiple ways to add labels:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  xlab(NULL) + \r\n  # scale_x_date(name = NULL) +\r\n  ylab(\"Closing Price\") +\r\n  # scale_y_continuous(name = \"Closing Price\") +\r\n  scale_color_discrete(name = \"Cryptocurrency:\")\r\n\r\n\r\n\r\n\r\nTo change the labels and add a title, a subtitle, a caption and/or a tag, use labs():\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(x = NULL, y = \"Closing Price\", color = \"Cryptocurrency:\",\r\n       title = \"Performance of the Top 4 Cryptocurrencies\", caption = \"Data: CoinMarketCap.com\",\r\n       subtitle = \"The time series show daily closing prices from 2018 to 2020.\", tag = \"A)\")\r\n\r\n\r\n\r\n\r\nPlot Position\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot() +\r\n  ggtitle(\"Closing Prices of the Top 4 Cryptocurrencies, 2018–2020\") +\r\n  theme(plot.title.position = \"panel\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, currency)) +\r\n  geom_boxplot() +\r\n  ggtitle(\"Closing Prices of the Top 4 Cryptocurrencies, 2018–2020\") +\r\n  theme(plot.title.position = \"plot\")\r\n\r\n\r\n\r\n\r\nText Rendering with {ggtext}\r\nThe {ggtext} package provides simple Markdown and HTML rendering for {ggplot2}.\r\n\r\n\r\n#install.packages(\"ggtext\")\r\nlibrary(ggtext)\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Performance of the **Top 4 Cryptocurrencies**\", caption = \"Data: *CoinMarketCap.com*\")\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Performance of the **Top 4 Cryptocurrencies**\", caption = \"Data: *CoinMarketCap.com*\") + \r\n  theme(plot.title = element_markdown(), plot.caption = element_markdown())\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Performance of the <b style='font-size:34pt;'>Top 4 Cryptocurrencies \", \r\n       caption = \"<span style='color:firebrick;'>Data:<\/span> <i>CoinMarketCap.com<\/i>\") +\r\n  theme(plot.title = element_markdown(), plot.caption = element_markdown())\r\n\r\n\r\n\r\n\r\nelement_textbox and element_textbox_simple automatically wrap long text:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Accumsan tortor posuere ac ut consequat semper viverra nam libero.\") +\r\n  theme(plot.title = element_textbox_simple())\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Accumsan tortor posuere ac ut consequat semper viverra nam libero.\") + \r\n  theme(plot.title = element_textbox_simple(margin = margin(b = 15), lineheight = .9))\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Accumsan tortor posuere ac ut consequat semper viverra nam libero.\") +\r\n  theme(plot.title = element_textbox_simple(margin = margin(b = 15), lineheight = .9,\r\n                                            linetype = 1, padding = margin(rep(10, 4))))\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() + \r\n  labs(title = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Accumsan tortor posuere ac ut consequat semper viverra nam libero.\") +\r\n  theme(plot.title = element_textbox_simple(margin = margin(b = 15), lineheight = .9,\r\n                                            linetype = 1, padding = margin(rep(10, 4)),\r\n                                            r = unit(10, \"pt\"), fill = \"moccasin\"))\r\n\r\n\r\n\r\n\r\nBasic Text Labelling\r\nAnnotations via annotate()\r\nThe annotate() function allows to add geom’s to a plot without mapping to variables to aesthetics:\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate(\r\n    geom = \"text\",\r\n    x = 250,\r\n    y = 50,\r\n    label = \"Some\\nadditional\\ntext\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate( \r\n    geom = \"text\", \r\n    x = 250, \r\n    y = 50,\r\n    label = \"Some\\nadditional\\ntext\",\r\n    size = 6,\r\n    color = \"firebrick\",\r\n    fontface = \"bold\",\r\n    lineheight = .9\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate(\r\n    geom = \"rect\",\r\n    xmin = 150, \r\n    xmax = Inf, \r\n    ymin = 150, \r\n    ymax = Inf,\r\n    fill = \"firebrick\"  \r\n  )\r\n\r\n\r\n\r\n\r\nThe annotate() function also allows to add geom’s to a plot without mapping to variables to aesthetics:\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  annotate(\r\n    geom = \"rect\", \r\n    xmin = 150, \r\n    xmax = Inf, \r\n    ymin = 150, \r\n    ymax = Inf,\r\n    fill = \"firebrick\"\r\n  ) +\r\n  geom_point(size = 2)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate(\r\n    geom = \"text\", \r\n    x = 250, y = 50,\r\n    label = \"Some\\nadditional\\ntext\",\r\n    size = 6,\r\n    lineheight = .9 \r\n  ) +\r\n  annotate(\r\n    geom = \"line\",\r\n    x = 250, y = 75,\r\n    xend = 180, yend = 160\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate(\r\n    geom = \"text\", \r\n    x = 250, y = 50,\r\n    label = \"Some\\nadditional\\ntext\",\r\n    size = 6,\r\n    lineheight = .9 \r\n  ) +\r\n  annotate(\r\n    geom = \"curve\",\r\n    x = 250, y = 75, \r\n    xend = 180, yend = 160\r\n  ) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate( \r\n    geom = \"text\", \r\n    x = 250, y = 50,\r\n    label = \"Some\\nadditional\\ntext\",\r\n    size = 6,\r\n    lineheight = .9 \r\n  ) +\r\n  annotate(\r\n    geom = \"curve\",\r\n    x = 250, y = 75, \r\n    xend = 180, yend = 160,\r\n    curvature = .4,\r\n    arrow = arrow()\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate( \r\n    geom = \"text\", \r\n    x = 250, y = 50,\r\n    label = \"Some\\nadditional\\ntext\",\r\n    size = 6,\r\n    lineheight = .9 \r\n  ) +\r\n  annotate(\r\n    geom = \"curve\",\r\n    x = 250, y = 75, \r\n    xend = 180, yend = 160,\r\n    curvature = .4,\r\n    arrow = arrow(length = unit(0.4, \"lines\"),\r\n                  type = \"closed\",\r\n                  ends = \"both\")\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  annotate( \r\n    geom = \"text\", \r\n    x = 250, y = 50,\r\n    label = \"Some\\nadditional\\ntext\",\r\n    size = 6,\r\n    lineheight = .9 \r\n  ) +\r\n  annotate(\r\n    geom = \"curve\",\r\n    x = 250, y = 75, \r\n    xend = 180, yend = 160,\r\n    curvature = .8, \r\n    angle = 130,\r\n    arrow = arrow(length = unit(0.4, \"lines\"),\r\n                  type = \"closed\",\r\n                  ends = \"both\")\r\n  )\r\n\r\n\r\n\r\n\r\nExercise 1:\r\nCreate the following visualization: \r\nAnnotations via geom_text|label()\r\nYou already know geom_text():\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  geom_text(\r\n    aes(label = currency),\r\n    size = 5\r\n  )\r\n\r\n\r\n\r\n\r\nLet’s tag only those days that are considerably far from the diagonal:\r\n\r\n\r\noutliers <- data %>%\r\n  mutate(dist = abs(close - open) / sqrt(2)) %>% \r\n  filter(dist > 20)\r\n\r\n\r\n\r\n\r\n\r\noutliers <- data %>%\r\n  mutate(dist = abs(close - open) / sqrt(2)) %>% \r\n  filter(dist > 20)\r\n\r\noutliers\r\n\r\n\r\n# A tibble: 14 x 10\r\n   currency date        open  high   low close  year month  yday  dist\r\n   <chr>    <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 litecoin 2018-02-14 160.   218. 160.  213.   2018     2    45  38.0\r\n 2 litecoin 2018-02-03 131.   166. 121.  160.   2018     2    34  20.4\r\n 3 litecoin 2018-01-16 233.   233. 152.  188.   2018     1    16  31.5\r\n 4 litecoin 2018-01-08 288.   289. 238.  256.   2018     1     8  22.6\r\n 5 litecoin 2018-01-06 250.   323. 249.  296.   2018     1     6  33.0\r\n 6 bitcoin~ 2019-09-24 114.   115.  71.0  83.8  2019     9   267  21.3\r\n 7 bitcoin~ 2019-06-03 192.   236. 192.  221    2019     6   154  20.5\r\n 8 bitcoin~ 2019-05-29 122.   201. 115.  201.   2019     5   149  56.2\r\n 9 bitcoin~ 2019-05-21  63.2  139.  61.7 104.   2019     5   141  29.1\r\n10 bitcoin~ 2018-11-19 106.   108.  69.7  72.1  2018    11   323  23.9\r\n11 bitcoin~ 2018-11-16  94.5  134.  76.8 123.   2018    11   320  20.2\r\n12 bitcoin~ 2018-11-15 176.   180.  71.0  93.7  2018    11   319  58.4\r\n13 bitcoin~ 2018-11-14 206.   244. 155.  175.   2018    11   318  21.9\r\n14 bitcoin~ 2018-11-13 110.   208. 109.  208.   2018    11   317  69.7\r\n\r\nWe can use both data sets in the same ggplot:\r\n\r\n\r\nggplot(outliers, aes(close, open)) + \r\n  geom_point(data = data, color = \"grey80\") +\r\n  geom_point(size = 2) +\r\n  geom_text(\r\n    aes(label = currency),\r\n    size = 5\r\n  )\r\n\r\n\r\n\r\n\r\nWe can offset the labels with the help of the nudge arguments:\r\n\r\n\r\nggplot(outliers, aes(close, open)) + \r\n  geom_point(data = data, color = \"grey80\") +\r\n  geom_point(size = 2) +\r\n  geom_text(\r\n    aes(label = currency),\r\n    size = 5,\r\n    hjust = 0,\r\n    nudge_x = 5,\r\n    nudge_y = -5\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(outliers, aes(close, open)) + \r\n  geom_point(data = data, color = \"grey80\") + \r\n  geom_point(size = 2) +\r\n  geom_text(\r\n    aes(label = currency),\r\n    size = 5,\r\n    hjust = 0,\r\n    nudge_x = 5, \r\n    nudge_y = -5 \r\n  ) +\r\n  scale_x_continuous(\r\n    limits = c(NA, 320)\r\n  )\r\n\r\n\r\n\r\n\r\nAdvanced Text Labelling\r\nAnnotations via geom\\_text|label\\_repel()\r\nThe {ggrepel} package provides two geom’s to repel overlapping text labels\r\n\r\n\r\n#install.packages(\"ggrepel\")\r\n\r\nggplot(outliers, aes(close, open)) + \r\n  geom_point(data = data, color = \"grey80\") +\r\n  geom_point(size = 2) +\r\n  ggrepel::geom_text_repel(\r\n    aes(label = currency),\r\n    size = 5,\r\n    hjust = 0\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n#install.packages(\"ggrepel\")\r\n\r\nggplot(outliers, aes(close, open)) + \r\n  geom_point(data = data, color = \"grey80\") +\r\n  geom_point(size = 2) +\r\n  ggrepel::geom_label_repel(\r\n    aes(label = currency),\r\n    size = 5,\r\n    ## space between points + labels\r\n    box.padding = .5,\r\n    ## always draw segments\r\n    min.segment.length = 0\r\n  )\r\n\r\n\r\n\r\n\r\nAnnotations via geom\\_mark\\_*()\r\nFor illustration purposes we use a data set about Palmer penguins (Horst, Hill & Gorman 2020).\r\n\r\n\r\npenguins <- read_csv(\r\n  here::here(\"data\", \"penguins.csv\")\r\n)\r\n\r\n(g <- \r\n  ggplot(\r\n    penguins, \r\n    aes(flipper_length_mm, bill_length_mm,\r\n        color = species)\r\n    ) + \r\n    geom_point(show.legend = FALSE) \r\n)\r\n\r\n\r\n\r\n\r\nThe {ggforce} package provides functionality to highlight groups:\r\n\r\n\r\n#install.packages(\"ggforce\")\r\n\r\ng +\r\n  ggforce::geom_mark_ellipse(\r\n    aes(label = species)\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  ggforce::geom_mark_ellipse(\r\n    aes(label = species)\r\n  ) +\r\n  coord_cartesian(\r\n    xlim = c(160, 250), \r\n    ylim = c(20, 70)\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  ggforce::geom_mark_ellipse(\r\n    aes(label = species,\r\n        description = latin_name)\r\n  ) +\r\n  coord_cartesian( \r\n    xlim = c(160, 250), \r\n    ylim = c(20, 70)\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  ggforce::geom_mark_ellipse(\r\n    aes(label = species,\r\n        filter = species == \"Adelie\")\r\n  ) +\r\n  coord_cartesian( \r\n    xlim = c(165, NA),\r\n    ylim = c(25, NA)\r\n  ) +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  ggforce::geom_mark_circle(\r\n    aes(label = species,\r\n        filter = species == \"Adelie\") \r\n  ) +\r\n  coord_cartesian( \r\n    xlim = c(165, NA),\r\n    ylim = c(25, NA)\r\n  ) +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  ggforce::geom_mark_rect(\r\n    aes(label = species,\r\n        filter = species == \"Adelie\")\r\n  ) +\r\n  coord_cartesian( \r\n    xlim = c(165, NA),\r\n    ylim = c(25, NA)\r\n  ) +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  ggforce::geom_mark_hull(\r\n    aes(label = species,\r\n        filter = species == \"Adelie\") \r\n  ) +\r\n  coord_cartesian( \r\n    xlim = c(165, NA),\r\n    ylim = c(25, NA)\r\n  ) +\r\n  theme(legend.position = \"none\")\r\n\r\n\r\n\r\n\r\nAdd Images\r\nAdd Images via annotation_custom()\r\nmagick::image_read() allows to directly store images from the web in R:\r\n\r\n\r\n#install.packages(\"magick\")\r\nurl <- \"https://image.shutterstock.com/image-vector/set-gold-silver-crypto-currencies-260nw-775898248.jpg\"\r\nimg <- magick::image_read(url)\r\n\r\nimg\r\n\r\n\r\n\r\n\r\nannotation_custom() in combination with grid::rasterGrob() allows to add images:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  annotation_custom(\r\n    grid::rasterGrob(\r\n      image = img\r\n    ) \r\n  ) +\r\n  geom_line(size = .8)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  annotation_custom(\r\n    grid::rasterGrob(\r\n      image = img,\r\n      width = unit(.4, \"npc\")\r\n    ) \r\n  ) +\r\n  geom_line(size = .8) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  annotation_custom(\r\n    grid::rasterGrob(\r\n      image = img,\r\n      x = .5,\r\n      y = .9,\r\n      width = .9 \r\n    ) \r\n  ) +\r\n  geom_line(size = .8)\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  annotation_custom(\r\n    grid::rasterGrob(\r\n        image = img,\r\n        x = .5,\r\n        y = -.25,\r\n        width = .9 \r\n    ) \r\n  ) +\r\n  geom_line(size = .8) +\r\n  coord_cartesian(clip = \"off\") +\r\n  theme(plot.margin = margin(12, 12, 130, 12))\r\n\r\n\r\n\r\n\r\nAdd Images with the {cowplot}Package\r\nThe cowplot package can also be used to add images:\r\n\r\n\r\n#install.packages(\"cowplot\")\r\ng <- ggplot(data, aes(close, open)) +\r\n  geom_point(alpha = .4) +\r\n  theme(plot.margin = margin(12, 12, 70, 12))\r\n\r\ncowplot::ggdraw(g) +\r\n  cowplot::draw_image(\r\n    img, \r\n    scale = 1\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng <- ggplot(data, aes(close, open)) +\r\n  geom_point(alpha = .4) +\r\n  theme(panel.background = element_blank(),\r\n        plot.background = element_blank())\r\n\r\ncowplot::ggdraw() +\r\n  cowplot::draw_image(\r\n    img, \r\n    scale = 1\r\n  ) +\r\n  cowplot::draw_plot(g)\r\n\r\n\r\n\r\n\r\n\r\n\r\ng <- ggplot(data, aes(close, open)) +\r\n  geom_point(alpha = .4) +\r\n  theme(plot.margin = margin(12, 12, 45, 12))\r\n\r\nurl <- \"https://upload.wikimedia.org/wikipedia/en/thumb/3/35/Pearson_logo.svg/1280px-Pearson_logo.svg.png\"\r\nlogo <- magick::image_read(url)\r\n\r\ncowplot::ggdraw(g) +\r\n  cowplot::draw_image(\r\n    logo,  \r\n    scale = .2, \r\n    x = 1,\r\n    hjust = 1, \r\n    halign = 1, \r\n    valign = 0\r\n  )\r\n\r\n\r\n\r\n\r\nExercise 2:\r\nPlay around with the two different approaches and how they differ in placing and scaling the images.\r\nBonus: Write a function that lets you add your company’s logo to a ggplot object.\r\nResources\r\nChapter 8 Annotations of the “ggplot2” book by Hadley Wickham et al.\r\nChapter 7 Annotations of the “R Graphics Cookbook” book by Winston Chang\r\n“Add a Logo to Your Plot”, blog post by Thomas Mock\r\n“How to Add a Logo to ggplot by Magick”, blog post by Daniel Hadley\r\n“A {ggplot2} Tutorial for Beautiful Plotting in R”, my extensive “how to”-tutorial\r\nAppendix\r\nAnnotations with {ggtext}\r\nThe {ggtext} package also comes with two geom’s: geom_richtext() and geom_textbox():\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  geom_richtext(\r\n    aes(\r\n      x = 250, y = 50, \r\n      label = \"Some **additional** text\"\r\n    ), \r\n    stat = \"unique\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  geom_richtext( \r\n    aes(\r\n      x = 250, y = 50,  \r\n        label = \"Some **additional** text\" \r\n    ),  \r\n    stat = \"unique\",\r\n    color = \"firebrick\",\r\n    size = 5,\r\n    fill = NA, \r\n    label.color = NA\r\n  ) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  geom_textbox(\r\n    aes(\r\n      x = 210, y = 50,  \r\n      label =  \"**Lorem ipsum** dolor sit amet, *consectetur adipiscing elit,* sed do eiusmod tempor incididunt ut labore et dolore <span style='color:red;'>magna<\/span> aliqua. *Accumsan tortor posuere ac ut consequat semper* ***viverra nam libero.***\"\r\n    ), \r\n   stat = \"unique\"\r\n  ) \r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(close, open)) +\r\n  geom_point(size = 2) +\r\n  geom_textbox( \r\n    aes(\r\n      x = 210, y = 50,  \r\n      label =  \"**Lorem ipsum** dolor sit amet, *consectetur adipiscing elit,* sed do eiusmod tempor incididunt ut labore et dolore <span style='color:red;'>magna<\/span> aliqua. *Accumsan tortor posuere ac ut consequat semper* ***viverra nam libero.***\"\r\n    ), \r\n    stat = \"unique\",\r\n   width = unit(15, \"lines\")\r\n  ) \r\n\r\n\r\n\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-17 16:20:56 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [f9352e7] 2021-08-17: build page\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n [1] ggtext_0.1.1        rnaturalearth_0.1.0 sf_1.0-1           \r\n [4] forcats_0.5.1       stringr_1.4.0       dplyr_1.0.7        \r\n [7] purrr_0.3.4         readr_1.4.0         tidyr_1.1.3        \r\n[10] tibble_3.1.2        ggplot2_3.3.5       tidyverse_1.3.1    \r\n\r\nloaded via a namespace (and not attached):\r\n  [1] colorspace_2.0-2   ellipsis_0.3.2     class_7.3-19      \r\n  [4] rio_0.5.27         rgdal_1.5-23       rprojroot_2.0.2   \r\n  [7] markdown_1.1       fs_1.5.0           gridtext_0.1.4    \r\n [10] rstudioapi_0.13    proxy_0.4-26       farver_2.1.0      \r\n [13] hexbin_1.28.2      ggrepel_0.9.1      fansi_0.5.0       \r\n [16] lubridate_1.7.10   xml2_1.3.2         splines_4.1.0     \r\n [19] downlit_0.2.1      knitr_1.33         polyclip_1.10-0   \r\n [22] jsonlite_1.7.2     broom_0.7.8        dbplyr_2.1.1      \r\n [25] png_0.1-7          rgeos_0.5-5        ggforce_0.3.3     \r\n [28] compiler_4.1.0     httr_1.4.2         backports_1.2.1   \r\n [31] assertthat_0.2.1   Matrix_1.3-3       cli_3.0.0         \r\n [34] tweenr_1.0.2       s2_1.0.6           htmltools_0.5.1.1 \r\n [37] tools_4.1.0        gtable_0.3.0       glue_1.4.2        \r\n [40] wk_0.5.0           V8_3.4.2           Rcpp_1.0.7        \r\n [43] cellranger_1.1.0   jquerylib_0.1.4    vctrs_0.3.8       \r\n [46] nlme_3.1-152       xfun_0.24          openxlsx_4.2.4    \r\n [49] rvest_1.0.0        lifecycle_1.0.0    MASS_7.3-54       \r\n [52] scales_1.1.1       ragg_1.1.3         hms_1.1.0         \r\n [55] RColorBrewer_1.1-2 yaml_2.2.1         curl_4.3.2        \r\n [58] sass_0.4.0         distill_1.2        stringi_1.7.3     \r\n [61] highr_0.9          e1071_1.7-7        zip_2.2.0         \r\n [64] rlang_0.4.11       pkgconfig_2.0.3    systemfonts_1.0.2 \r\n [67] evaluate_0.14      lattice_0.20-44    labeling_0.4.2    \r\n [70] cowplot_1.1.1      tidyselect_1.1.1   here_1.0.1        \r\n [73] magrittr_2.0.1     bookdown_0.22      R6_2.5.0          \r\n [76] magick_2.7.2       generics_0.1.0     DBI_1.1.1         \r\n [79] pillar_1.6.1       haven_2.4.1        foreign_0.8-81    \r\n [82] withr_2.4.2        mgcv_1.8-35        units_0.7-2       \r\n [85] sp_1.4-5           modelr_0.1.8       crayon_1.4.1      \r\n [88] KernSmooth_2.23-20 utf8_1.2.1         rmarkdown_2.9     \r\n [91] grid_4.1.0         readxl_1.3.1       data.table_1.14.0 \r\n [94] git2r_0.28.0       reprex_2.0.0       digest_0.6.27     \r\n [97] classInt_0.4-3     textshaping_0.3.5  munsell_0.5.0     \r\n[100] viridisLite_0.4.0  concaveman_1.1.0   bslib_0.2.5.1     \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T16:21:00+02:00"
    },
    {
      "path": "05-multipanel-rmarkdown.html",
      "title": "Segment 5: Create multipanel Figures",
      "description": "Part 3 of the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly",
      "author": [
        {
          "name": "Cédric Scherer",
          "url": "https://cedricscherer.com"
        }
      ],
      "contents": "\r\n\r\nContents\r\nCreating Small Multiples with facet_*()\r\nfacet_wrap()\r\nfacet_grid()\r\n\r\nExercise 1:\r\nCreate Plot Compositions with the patchwork Package\r\nExercise 2:\r\nResources\r\nSession Info\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\ntheme_set(theme_light(base_size = 18))\r\ndata <- readr::read_csv(\"https://raw.githubusercontent.com/z3tt/hands-on-ggplot2/main/data/crypto_cleaned.csv\")\r\n\r\n\r\n\r\nCreating Small Multiples with facet_*()\r\nFaceting can be used to visualize data as small multiples, each showing a different subset of the data. Small multiples are a powerful tool for exploratory data analysis to avoid overplotting, compare many groups, and highlight differences.\r\nAdapted from “ggplot2: Elegant Graphics for Data Analysis” by Hadley WickhamThe well-known plot we are going to use for our small multiples, saved as g:\r\n\r\n\r\ng <- \r\n  ggplot(data, aes(date, close)) +\r\n    geom_line(\r\n      aes(color = currency),\r\n      size = 1\r\n    ) +\r\n    scale_x_date(\r\n      date_labels = \"%m/%y\",\r\n      expand = c(0, 0)\r\n    ) +\r\n    scale_y_continuous(\r\n      labels = scales::dollar_format()\r\n    ) +\r\n    scale_color_brewer(\r\n      palette = \"Set1\",\r\n      guide = \"none\"\r\n    )\r\n\r\ng\r\n\r\n\r\n\r\n\r\nfacet_wrap()\r\nfacet_wrap() splits the data into small multiples based on one grouping variable:\r\n\r\n\r\ng +\r\n  facet_wrap(vars(year))\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_wrap(vars(currency))\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_wrap(~ currency)\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_wrap(\r\n    vars(currency),\r\n    scales = \"free\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_wrap(\r\n    vars(currency),\r\n    scales = \"free_y\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_wrap(\r\n    vars(currency),\r\n    nrow = 1\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_wrap(\r\n    vars(currency),\r\n    ncol = 1\r\n  )\r\n\r\n\r\n\r\n\r\nfacet_grid()\r\nfacet_grid() spans a grid of each combination of two grouping variables:\r\n\r\n\r\ng +\r\n  facet_grid(\r\n    cols = vars(currency),\r\n    rows = vars(year)\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_grid(\r\n    year ~ currency\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_grid(\r\n    currency ~ year\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_grid(\r\n    currency ~ year,\r\n    scales = \"free\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ng +\r\n  facet_grid(\r\n    currency ~ year,\r\n    scales = \"free_y\"\r\n  )\r\n\r\n\r\n\r\n\r\nExercise 1:\r\nA famous statistical data set is the “Datasaurus Dozen”, which is based on “Anscome’s Quartet”.Import the according data into R and inspect it: datasaurus.csv\r\nVisualize all 12 sets as small multiples of scatter plots.\r\nAlso, add to each facet a linear fitting in the back.\r\nUse a built-in theme and add a title and explanation of the visual.\r\nCreate Plot Compositions with the patchwork Package\r\nIllustration by Allison HorstBuild up your multipanel plot sequentially using The Composer of Plots:\r\n\r\n\r\n(time <- ggplot(data, aes(date, close)) +\r\n  geom_line(aes(color = currency)) +\r\n  scale_color_brewer(palette = \"Set1\",\r\n                     guide = \"none\"))\r\n\r\n\r\n\r\n(box <- ggplot(data, aes(currency, close)) +\r\n  geom_boxplot(aes(color = currency)) +\r\n  scale_color_brewer(palette = \"Set1\",\r\n                     guide = \"none\"))\r\n\r\n\r\n\r\n\r\n\r\n\r\n#install.packages(\"patchwork\")\r\nlibrary(patchwork)\r\n\r\ntime + box\r\n\r\n\r\n\r\n\r\n\r\n\r\ntime / box\r\n\r\n\r\n\r\n\r\nWith the help of plot_layout() you can adjust widths and/or heights:\r\n\r\n\r\ntime + box + \r\n  plot_layout(widths = c(2, 1))\r\n\r\n\r\n\r\n\r\nThe plot_spacer() function allows to add empty panels:\r\n\r\n\r\ntime + plot_spacer() + box + \r\n  plot_layout(widths = c(2, .5, 1))\r\n\r\n\r\n\r\n\r\nLet’s add another plot — with parentheses you can nest plots:\r\n\r\n\r\nscatter <-\r\n  ggplot(data,\r\n         aes(close, open)) +\r\n  geom_point(\r\n    aes(color = currency),\r\n    size = 1.5,\r\n    alpha = .25\r\n  ) +\r\n  scale_color_brewer(\r\n    palette = \"Set1\",\r\n    guide = \"none\"\r\n  )\r\n\r\ntime / (box + scatter) +\r\n  plot_layout(heights = c(1, 2))\r\n\r\n\r\n\r\n\r\nNote that even with legends the plot panels align:\r\n\r\n\r\nscatter_guide <-\r\n  ggplot(data,\r\n         aes(close, open)) +\r\n  geom_point(\r\n    aes(color = currency),\r\n    size = 1.5,\r\n    alpha = .25\r\n  ) +\r\n  scale_color_brewer(\r\n    palette = \"Set1\",\r\n    #guide = \"none\"\r\n  )\r\n\r\ntime / (box + scatter_guide) +\r\n  plot_layout(heights = c(1, 2))\r\n\r\n\r\n\r\n\r\nThe argument guides = \"collect\" groups legends and places them relative to the composition:\r\n\r\n\r\ntime / (box + scatter_guide) +\r\n  plot_layout(\r\n    heights = c(1, 2),\r\n    guides = \"collect\"\r\n  )\r\n\r\n\r\n\r\n\r\nFurthermore, plot_annotation() allows to add labels on the compositional level:\r\n\r\n\r\ntime / (box + scatter_guide) +\r\n  plot_layout(\r\n    heights = c(1, 2),\r\n    guides = \"collect\"\r\n  ) +\r\n  plot_annotation(\r\n    title = \"Performance of Top 4 Cryptocurrencies\"\r\n  )\r\n\r\n\r\n\r\n\r\nplot_annotation() also comes with the functionality to tag panels in one step:\r\n\r\n\r\ntime / (box + scatter_guide) +\r\n  plot_layout(\r\n    heights = c(1, 2),\r\n    guides = \"collect\"\r\n  ) +\r\n  plot_annotation(\r\n    title = \"Performance of Top 4 Cryptocurrencies\",\r\n    tag_levels = \"A\",\r\n    tag_suffix = \")\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\ntime / (box + scatter_guide) +\r\n  plot_layout(\r\n    heights = c(1, 2),\r\n    guides = \"collect\"\r\n  ) +\r\n  plot_annotation(\r\n    title = \"Performance of Top 4 Cryptocurrencies\",\r\n    tag_levels = \"i\",\r\n    tag_prefix = \"(\",\r\n    tag_suffix = \")\"\r\n  )\r\n\r\n\r\n\r\n\r\n{patchwork} also allows to place plots as insets:\r\n\r\n\r\nbox <- box + \r\n  theme(plot.background = element_blank())\r\n\r\nscatter +\r\n  inset_element(\r\n    box, \r\n    top = .55,\r\n    right = 1, \r\n    bottom = 0,\r\n    left = .6\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n\r\nbox <- box + \r\n  theme(panel.background = element_blank())\r\n\r\nscatter +\r\n  inset_element(\r\n    box, \r\n    top = .9,\r\n    right = .9,\r\n    bottom = .1,\r\n    left = .1\r\n  )\r\n\r\n\r\n\r\n\r\nExercise 2:\r\nUsing the “Datasaurus Dozen” data set and the previous codes, create this multipanel visualizationwith the help of facet_wrap() and the {patchwork} package. \r\nResources\r\nChapters on faceting and arranging plots of the “ggplot2” book by Hadley Wickham et al.\r\n{patchwork} package reference with lots of articles on ho to create (more complex) layouts\r\n{cowplot} package reference, another package to arrange multiple plots in a grid(and to add insets and images)\r\nHow to add annotations to individual facets, part of the “R Graphics Cookbook” book by Winston Chang\r\n“A {ggplot2} Tutorial for Beautiful Plotting in R”, my extensive “how to”-tutorial\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-17 16:21:36 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [f9352e7] 2021-08-17: build page\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n [1] patchwork_1.1.1     ggtext_0.1.1        rnaturalearth_0.1.0\r\n [4] sf_1.0-1            forcats_0.5.1       stringr_1.4.0      \r\n [7] dplyr_1.0.7         purrr_0.3.4         readr_1.4.0        \r\n[10] tidyr_1.1.3         tibble_3.1.2        ggplot2_3.3.5      \r\n[13] tidyverse_1.3.1    \r\n\r\nloaded via a namespace (and not attached):\r\n  [1] colorspace_2.0-2   ellipsis_0.3.2     class_7.3-19      \r\n  [4] rio_0.5.27         rgdal_1.5-23       rprojroot_2.0.2   \r\n  [7] markdown_1.1       fs_1.5.0           gridtext_0.1.4    \r\n [10] rstudioapi_0.13    proxy_0.4-26       farver_2.1.0      \r\n [13] hexbin_1.28.2      ggrepel_0.9.1      fansi_0.5.0       \r\n [16] lubridate_1.7.10   xml2_1.3.2         splines_4.1.0     \r\n [19] downlit_0.2.1      knitr_1.33         polyclip_1.10-0   \r\n [22] jsonlite_1.7.2     broom_0.7.8        dbplyr_2.1.1      \r\n [25] png_0.1-7          rgeos_0.5-5        ggforce_0.3.3     \r\n [28] compiler_4.1.0     httr_1.4.2         backports_1.2.1   \r\n [31] assertthat_0.2.1   Matrix_1.3-3       cli_3.0.0         \r\n [34] tweenr_1.0.2       s2_1.0.6           htmltools_0.5.1.1 \r\n [37] tools_4.1.0        gtable_0.3.0       glue_1.4.2        \r\n [40] wk_0.5.0           V8_3.4.2           Rcpp_1.0.7        \r\n [43] cellranger_1.1.0   jquerylib_0.1.4    vctrs_0.3.8       \r\n [46] nlme_3.1-152       xfun_0.24          openxlsx_4.2.4    \r\n [49] rvest_1.0.0        lifecycle_1.0.0    MASS_7.3-54       \r\n [52] scales_1.1.1       ragg_1.1.3         hms_1.1.0         \r\n [55] RColorBrewer_1.1-2 yaml_2.2.1         curl_4.3.2        \r\n [58] sass_0.4.0         distill_1.2        stringi_1.7.3     \r\n [61] highr_0.9          e1071_1.7-7        zip_2.2.0         \r\n [64] rlang_0.4.11       pkgconfig_2.0.3    systemfonts_1.0.2 \r\n [67] evaluate_0.14      lattice_0.20-44    labeling_0.4.2    \r\n [70] cowplot_1.1.1      tidyselect_1.1.1   here_1.0.1        \r\n [73] magrittr_2.0.1     bookdown_0.22      R6_2.5.0          \r\n [76] magick_2.7.2       generics_0.1.0     DBI_1.1.1         \r\n [79] pillar_1.6.1       haven_2.4.1        foreign_0.8-81    \r\n [82] withr_2.4.2        mgcv_1.8-35        units_0.7-2       \r\n [85] sp_1.4-5           modelr_0.1.8       crayon_1.4.1      \r\n [88] KernSmooth_2.23-20 utf8_1.2.1         rmarkdown_2.9     \r\n [91] grid_4.1.0         readxl_1.3.1       data.table_1.14.0 \r\n [94] git2r_0.28.0       reprex_2.0.0       digest_0.6.27     \r\n [97] classInt_0.4-3     textshaping_0.3.5  munsell_0.5.0     \r\n[100] viridisLite_0.4.0  concaveman_1.1.0   bslib_0.2.5.1     \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T16:21:39+02:00"
    },
    {
      "path": "about.html",
      "title": "Dr Cédric Scherer",
      "author": [],
      "contents": "\r\n\r\n          \r\n          \r\n          Hands-On DataViz with ggplot2\r\n          \r\n          \r\n          Schedule\r\n          \r\n          \r\n          Slides\r\n           \r\n          ▾\r\n          \r\n          \r\n          1. The Grammar of Graphics\r\n          2. Build Plots Layer by Layer\r\n          3. Polish Your Visualization\r\n          4. Provide Context with Annotations\r\n          5. Create Multi-Panel Figures \r\n          \r\n          \r\n          \r\n          \r\n          Notebooks\r\n           \r\n          ▾\r\n          \r\n          \r\n          1. The Grammar of Graphics\r\n          2. Build Plots Layer by Layer\r\n          3. Polish Your Visualization\r\n          4. Provide Context with Annotations\r\n          5. Create Multi-Panel Figures \r\n          \r\n          \r\n          \r\n          \r\n          Codes\r\n           \r\n          ▾\r\n          \r\n          \r\n          1. The Grammar of Graphics\r\n          2. Build Plots Layer by Layer\r\n          3. Polish Your Visualization\r\n          4. Provide Context with Annotations\r\n          5. Create Multi-Panel Figures \r\n          \r\n          \r\n          About\r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          ☰\r\n          \r\n          \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Dr Cédric Scherer\r\n            \r\n            \r\n              \r\n                \r\n                    \r\n                      \r\n                        Homepage\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        Twitter\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        LinkedIn\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        GitHub\r\n                      \r\n                    \r\n                  \r\n                                  \r\n            \r\n          \r\n        \r\n        \r\n        \r\n          \r\n            Cédric is a graduated computational ecologist with a passion for design. In 2020, he combined his expertise in analyzing and visualizing large data sets in R with his passion to become a freelance data visualization specialist.\r\n            Cédric has created visualizations across all disciplines, purposes, and styles and regularly teaches data visualization principles, R, and ggplot2. Due to regular participation to social data challenges, he is now well known for complex and visually appealing figures, entirely made with ggplot2, that look as they have been created with a vector design tool.\r\n          \r\n        \r\n      \r\n    \r\n\r\n    \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Dr Cédric Scherer\r\n            \r\n            \r\n              \r\n                \r\n                                    \r\n                    \r\n                      Homepage\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      Twitter\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      LinkedIn\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      GitHub\r\n                    \r\n                  \r\n                                  \r\n              \r\n            \r\n            \r\n              Cédric is a graduated computational ecologist with a passion for design. In 2020, he combined his expertise in analyzing and visualizing large data sets in R with his passion to become a freelance data visualization specialist.\r\n              Cédric has created visualizations across all disciplines, purposes, and styles and regularly teaches data visualization principles, R, and ggplot2. Due to regular participation to social data challenges, he is now well known for complex and visually appealing figures, entirely made with ggplot2, that look as they have been created with a vector design tool.\r\n            \r\n        \r\n      \r\n    \r\n\r\n    \r\n    \r\n    ",
      "last_modified": "2021-08-17T16:21:39+02:00"
    },
    {
      "path": "index.html",
      "title": "Hands–On Data Visualization with ggplot2",
      "description": "How to Create Engaging and Well–Designed Visualizations in R",
      "author": [],
      "contents": "\r\nOverview\r\nThis is the home page for the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly. All course materials will be posted on this site.\r\nDetails\r\nInstructor: Dr Cédric SchererDate: September 3, 2021\r\nWhat You’ll Learn\r\nLoad data into R and visualize it with the help of the powerful ggplot2 library.\r\nCustomize your ggplot2 output as you like including theming, colors, annotations, and many more.\r\nGet to know useful extension libraries that will boost your workflow and improve your ggplot2 design.\r\nUse Rmarkdown notebooks to build reproducible reports.\r\nGet insights how to prepare and wrangle data with the popular tidyverse package collection.\r\nWho is the Training for\r\nAnyone interested in creating visually appealing charts with R and ggplot2—no matter if you have no or minimal experience with R.\r\nData scientists aiming to use the powerful ggplot2 library in their workflow for exploration and communication.\r\nBusiness managers that aim to quickly gain data insights based on reproducible and elegantly formatted charts and reports.\r\nCourse Set-Up\r\nTo run any of the materials locally on your own machine, you will need the following:\r\nA recent version of R (download from here) and RStudio, (download from here).\r\nfor more detailed instructions see Chapter 2 of “R Programming for Statistics and Data Science” by 365 Careers\r\n\r\nThe following R packages:\r\ntidyverse (includes ggplot2)\r\ncowplot\r\nggforce\r\nggrepel\r\nggtext\r\nmagick\r\npatchwork\r\nragg\r\nrnaturalearth\r\nsf\r\n\r\nYou can install all required R packages at once by running the following code in the R command line:\r\n\r\n\r\n# Package names\r\npackages <- c(\"tidyverse\", \"cowplot\", \"ggforce\", \"ggrepel\", \"ggtext\", \"magick\", \"patchwork\", \"ragg\", \"rnaturalearth\", \"sf\")\r\ninstall.packages(packages)\r\n\r\n\r\n\r\nTo run the code, open up Rstudio and copy–paste the code in console window and hit enter. Several messages should pop up. Scan these messages that are returned for errors and troubleshoot them if necessary. Warnings and other informational messages can be ignored.\r\nPrerequisites and Preparation\r\nFamiliarity with Rstudio (required)Suggested Material:\r\nBook: Chapter 1 of “R for Data Science” by Hadley Wickham & Garrett Grolemund\r\nVideo: Chapter 2 of “R Programming for Statistics and Data Science” by 365 Careers\r\n\r\nBasic Knowledge of R (helpful but not required)Suggested Material:\r\nBook: Chapter 4–6 of “R for Data Science” by Hadley Wickham & Garrett Grolemund\r\nBook: Chapter 1–3 “R for Everyone: Advanced Analytics and Graphics, 2nd Edition” by Jared Lander\r\nBook: Section 1 and 3 “Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R” by Joel Ross & Michael Freeman\r\nVideo: Chapters 3, 4, and 7 of “R Programming for Statistics and Data Science” by 365 Careers\r\n\r\nData Wrangling with the tidyverse (helpful but not required)Suggested Material:\r\nBook: Chapter 9–16 (Section: Wrangle) of “R for Data Science” by Hadley Wickham & Garrett Grolemund\r\nScenario: “Format and Shape Your Data in R with the Tidyverse” by Martin Frigaard\r\n\r\nReuse\r\nText and figures are licensed under Creative Commons Attribution CC BY 4.0.Note that figures in slides may be pulled in from external sources and may be licensed under different terms.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T16:21:41+02:00"
    },
    {
      "path": "schedule.html",
      "title": "Course Schedule",
      "description": "The live video training session takes 5 hours and constists of five segments. Each segment contains a lecture, hands-on examples, exercises, and a Q&A session.\n",
      "author": [],
      "contents": "\r\nSegment 1The Grammar of Graphics\r\nDuration: 60 min\r\nMotivation: The ggplot2 Showcase\r\nLoading data into R\r\nThe Grammar of Graphics\r\nOur First ggplot\r\n→ Slides: html, pdf\r\n→ Notebook\r\n→ Codes\r\nBreak: 5 min\r\nSegment 2Build Plots Layer by Layer\r\nDuration: 60 min\r\n\r\n\r\nCreate any Chart Type\r\nUse Statistical Transformations\r\nPlot Spatial Maps\r\n→ Slides: html, pdf\r\n→ Notebook\r\n→ Codes\r\nBreak: 10 min\r\nSegment 3Polish Your Visualization\r\nDuration: 60 min\r\nWork with Colors, Shapes, and Guides\r\nUse Template Designs\r\nCreate Custom Themes\r\n→ Slides: html, pdf\r\n→ Notebook\r\n→ Codes\r\nBreak: 5 min\r\nSegment 4Provide Context with Annotations\r\nDuration: 45 min\r\nInsert Titles and Labels\r\nBasic and Advanced Text Labeling\r\nAdd Images and Illustrations\r\n→ Slides: html, pdf\r\n→ Notebook\r\n→ Codes\r\nBreak: 10 min\r\nSegment 5Create Multi–Panel Figures\r\nDuration: 30 min\r\nCreate Small Multiples (Facets)\r\nCombine Multiple Plots with patchwork\r\n→ Slides: html, pdf\r\n→ Notebook\r\n→ Codes\r\nWrap–UpCourse Summary and Q&A\r\nDuration: 15 min\r\nReuse\r\nText and figures are licensed under Creative Commons Attribution CC BY 4.0.Note that figures in slides may be pulled in from external sources and may be licensed under different terms.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T16:21:43+02:00"
    }
  ],
  "collections": []
}
