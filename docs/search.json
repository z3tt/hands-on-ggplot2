{
  "articles": [
    {
      "path": "01-grammar-rmarkdown.html",
      "title": "Segment 1: The Basics of ggplot2",
      "author": [],
      "contents": "\r\n\r\nContents\r\nThe {ggplot2} Package\r\nAdvantages of {ggplot2}\r\nThe Setup\r\nThe Course Material\r\nThe Package\r\n\r\nThe Data Set\r\nImport the Data\r\n\r\nExercise 1\r\nThe Grammar of Graphics\r\nThe Structure of ggplot2\r\nData: ggplot(data)\r\nAesthetics: aes()\r\nLayers: geom_*() and stat_*()\r\nAesthetics: aes() (again)\r\nImportant Things First: Change the Default Theme\r\nLayers: geom_*() and stat_*() (repeated)\r\n\r\nExercise 2\r\nThe Grammar of Graphics (continued)\r\nScales: scales_*()\r\nCoordinate Systems: coord_*()\r\n\r\nSaving a ggplot\r\nAPPENDIX\r\nImport the Data\r\nAesthetics: aes()\r\n\r\nSession Info\r\n\r\nThe {ggplot2} Package\r\n\r\n{ggplot2} is a system for declaratively creating graphics,based on “The Grammar of Graphics” (Wilkinson, 2005). You provide the data, tell {ggplot2} how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.\r\n\r\nAdvantages of {ggplot2}\r\nconsistent underlying grammar of graphics (Wilkinson, 2005)\r\nvery flexible, layered plot specification\r\ntheme system for polishing plot appearance\r\nactive and helpful community\r\nThe Setup\r\nThe Course Material\r\nClone the repository.\r\n\r\nOpen the R Project: hands-on-ggplot2.Rproj\r\n\r\nOpen the first script: 01-grammar.Rmd\r\n\r\nRun code locally\r\n\r\n… or knit the report\r\n\r\nThe Package\r\nggplot2 is a data visualization package for the programming language R created by Hadley Wickham.\r\nIt should be already installed on your system (if not run the first line in the following chunk). The functionality of the package can be loaded by calling library() as for any other package:\r\n\r\n\r\n#install.packages(\"ggplot2\")\r\nlibrary(ggplot2)\r\n\r\n\r\n\r\nggplot2 is part of the tidyverse package collection. Thus, you can also load tidyverse without running library(ggplot2):\r\n\r\n\r\n#install.packages(\"tidyverse\")\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nThe Data Set\r\nWe use cryptocurrency financial data, pulled from CoinMarketCap.com. For our purposes, we limit the data to the period 08/2017–12/2019 and the top 4 cryptocurrencies.\r\nI have already prepared the data. If you want to know how, you can have a look here.\r\nImport the Data\r\nUsing the read_csv() function form the {readr} package, we can read the data directly from the web:\r\n\r\n\r\nurl <- \"https://raw.githubusercontent.com/z3tt/hands-on-ggplot2/main/data/crypto_cleaned.csv\"\r\n\r\ndata <- readr::read_csv(url)\r\n\r\ndata\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nOf course, one can import local files as well:\r\n\r\n\r\ndata_local <- readr::read_csv(\"data/crypto_cleaned.csv\")\r\n\r\ndata_local\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nThis assumes that you have placed the file in a folder called data in your working directory.\r\nYou can specify this directory via setwd() or, and preferably, use R projects.\r\nShort Explanation of ::\r\nThe so–called namespace allows to access functions from a package directly without loading it first.\r\npackagename::function(argument)\r\nFurthermore, it helps readers to understand from which package a function is imported from.\r\nExercise 1\r\nImport the data set on Chicago weather data:https://raw.githubusercontent.com/z3tt/ggplot-courses/master/data/chicago-nmmaps.csv\r\nInspect the data.\r\nThe Grammar of Graphics\r\nThe Structure of ggplot2\r\n\r\nData: ggplot(data)\r\nWe need to specify the data in the ggplot() call:\r\n\r\n\r\nggplot(data = data)\r\n\r\n\r\n\r\n\r\nThere is only an empty panel because ggplot2 doesn’t know what of the data it should plot.\r\nAesthetics: aes()\r\nWe need to specify two variables we want to plot as positional aesthetics:\r\n\r\n\r\nggplot(data = data, mapping = aes(x = date, y = close))\r\n\r\n\r\n\r\n\r\nThere is only an empty panel because ggplot2 doesn’t know how it should plot the data.\r\nThanks to implicit matching of arguments in ggplot() and aes(), we can also write:\r\n\r\n\r\nggplot(data, aes(date, close))\r\n\r\n\r\n\r\n\r\nLayers: geom_*() and stat_*()\r\nBy adding one or multiple layers we can tell ggplot2 how to represent the data. There are lots of build-in geometric elements (geom's) and statistical transformations (stat's):\r\nAdapted from ggplot2.tidyverse.org/referenceWe can tell ggplot2 to represent the data for example as a scatter plot:\r\n\r\n\r\nggplot(data, aes(date, close)) +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\nAesthetics: aes() (again)\r\nAesthetics do not only refer to x and y positions, but also groupings, colors, fills, shapes etc.\r\n\r\n\r\nggplot(data = data, mapping = aes(x = date, y = close, color = currency)) +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\nImportant Things First: Change the Default Theme\r\nYou can replace the default theme with one of the other in-built themes with theme_set(). Note that you can as well adjust some global settings, for example the base_size which is often too small in the default (11).\r\n\r\n\r\ntheme_set(theme_light(base_size = 18))\r\n\r\n\r\n\r\nBy using theme_set() the new theme is used for any plot you create aftwerwards! Give it a try on go back to the last chunk and re-run the code to generate the colored scatter plot.\r\nLayers: geom_*() and stat_*() (repeated)\r\nThe exciting thing about layers is that you can combine several geom_*() and stat_*() calls:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency)) +\r\n  geom_line() +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\n… and aesthetics can be applied either globally:\r\n\r\n\r\nggplot(data, aes(date, close, color = currency, shape = currency)) +\r\n  geom_line() +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\n… or for each layer individually:\r\n\r\n\r\nggplot(data, aes(date, close)) +\r\n  geom_line(aes(color = currency)) +\r\n  geom_point(aes(shape = currency))\r\n\r\n\r\n\r\n\r\nExercise 2\r\nIf needed, import the Chicago weather data again:\r\n\r\n\r\nchic <- readr::read_csv(\r\n  \"https://raw.githubusercontent.com/z3tt/ggplot-courses/master/data/chicago-nmmaps.csv\"\r\n)\r\n\r\n\r\n\r\nCreate a scatter plot of temperature (temp) versus day (date).\r\nColor the points by season (season).\r\nColor the points by year (year).\r\nWhat’s the problem? How could you fix it?\r\n\r\nBonus: Turn the scatter plot, colored by season, into a line plot.\r\nWhat’s the problem? How could you fix it?\r\n\r\nThe Grammar of Graphics (continued)\r\nScales: scales_*()\r\nScales are directly connected to aesthetics:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date(\r\n    expand = c(0, 0),\r\n    date_breaks = \"4 months\", \r\n    date_labels = \"%m/%y\",\r\n    name = NULL\r\n  ) +\r\n  scale_y_continuous(\r\n    labels = scales::dollar_format(),\r\n    sec.axis = dup_axis(name = NULL),\r\n    name = \"Closing Price\"\r\n  ) + \r\n  scale_color_discrete(\r\n    guide = \"none\"\r\n  )\r\n\r\n\r\n\r\n\r\nCoordinate Systems: coord_*()\r\nThe coordinate system maps the two position to a 2d position on the plot:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, \r\n                 color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete() +\r\n  coord_cartesian()\r\n\r\n\r\n\r\n\r\n\r\n\r\nggplot(data, aes(x = date, y = close, \r\n                 color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete() +\r\n  coord_polar()\r\n\r\n\r\n\r\n\r\nChanging the limits on the coordinate system allows to zoom in:\r\n\r\n\r\nggplot(data, aes(x = date, y = close, \r\n                 color = currency)) +\r\n  geom_line() +\r\n  geom_point() +\r\n  scale_x_date() + \r\n  scale_y_continuous() + \r\n  scale_color_discrete() +\r\n  coord_cartesian(\r\n    xlim = c(as.Date(\"2018-11-01\"),\r\n             as.Date(\"2019-11-01\")),\r\n    ylim = c(NA, 100)\r\n  )\r\n\r\n\r\n\r\n\r\n-> Facets, Themes, and Annotations will follow later!\r\nSaving a ggplot\r\nYou can export your plot via the ggsave() function:\r\n\r\n\r\nggsave(filename = \"my_ggplot.pdf\", \r\n       width = 10, height = 7, \r\n       device = cairo_pdf)\r\n\r\nggsave(filename = \"my_ggplot.png\", \r\n       width = 10, height = 7, \r\n       dpi = 700)\r\n\r\n\r\n\r\nSource: canva.comAPPENDIX\r\nImport the Data\r\nBase R\r\nThe base R function read.csv() works in the same way as readr::read_csv():\r\n\r\n\r\ndata2 <- read.csv(url)\r\n\r\nhead(data2)\r\n\r\n\r\n      currency       date  open  high   low close year month yday\r\n1 binance-coin 2019-12-04 15.35 15.69 15.01 15.28 2019    12  338\r\n2 binance-coin 2019-12-03 15.19 15.55 15.05 15.31 2019    12  337\r\n3 binance-coin 2019-12-02 15.51 15.71 15.15 15.19 2019    12  336\r\n4 binance-coin 2019-12-01 15.74 15.74 15.05 15.50 2019    12  335\r\n5 binance-coin 2019-11-30 16.26 16.37 15.54 15.72 2019    11  334\r\n6 binance-coin 2019-11-29 15.68 16.34 15.65 16.27 2019    11  333\r\n\r\n… and we can turn it into a tibble afterwards:\r\n\r\n\r\ndata2 <- tibble::as_tibble(data2)\r\n\r\ndata2\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <chr>      <dbl> <dbl> <dbl> <dbl> <int> <int> <int>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nHowever, note that by default the date column is runed into type character.\r\nThe {rio} Package\r\nThe import() function from the {rio} package allows to load all kind of data formats:\r\n\r\n\r\n#install.packages(\"rio\")\r\n\r\ndata3 <- rio::import(url)\r\n\r\nhead(data3)\r\n\r\n\r\n      currency       date  open  high   low close year month yday\r\n1 binance-coin 2019-12-04 15.35 15.69 15.01 15.28 2019    12  338\r\n2 binance-coin 2019-12-03 15.19 15.55 15.05 15.31 2019    12  337\r\n3 binance-coin 2019-12-02 15.51 15.71 15.15 15.19 2019    12  336\r\n4 binance-coin 2019-12-01 15.74 15.74 15.05 15.50 2019    12  335\r\n5 binance-coin 2019-11-30 16.26 16.37 15.54 15.72 2019    11  334\r\n6 binance-coin 2019-11-29 15.68 16.34 15.65 16.27 2019    11  333\r\n\r\n… and we can turn it into a tibble afterwards:\r\n\r\n\r\ndata3 <- tibble::as_tibble(data3)\r\n\r\ndata3\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <int> <int> <int>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nYou could also load, for example, Excel files with the same function:\r\n\r\n\r\ndata_xlsx <- rio::import( \"https://raw.githubusercontent.com/z3tt/hands-on-ggplot2/main/data/crypto_cleaned.xlsx\")\r\n\r\nhead(data_xlsx)\r\n\r\n\r\n  ...1     currency       date  open  high   low close year month\r\n1    1 binance-coin 2019-12-04 15.35 15.69 15.01 15.28 2019    12\r\n2    2 binance-coin 2019-12-03 15.19 15.55 15.05 15.31 2019    12\r\n3    3 binance-coin 2019-12-02 15.51 15.71 15.15 15.19 2019    12\r\n4    4 binance-coin 2019-12-01 15.74 15.74 15.05 15.50 2019    12\r\n5    5 binance-coin 2019-11-30 16.26 16.37 15.54 15.72 2019    11\r\n6    6 binance-coin 2019-11-29 15.68 16.34 15.65 16.27 2019    11\r\n  yday\r\n1  338\r\n2  337\r\n3  336\r\n4  335\r\n5  334\r\n6  333\r\n\r\nWe can remove the first column by using the select() function from the {dplyr} package:\r\n\r\n\r\ndata_xlsx <- dplyr::select(data_xlsx, -1)\r\n#data_xlsx <- dplyr::select(data_xlsx, currency:yday)\r\n\r\nhead(data_xlsx)\r\n\r\n\r\n      currency       date  open  high   low close year month yday\r\n1 binance-coin 2019-12-04 15.35 15.69 15.01 15.28 2019    12  338\r\n2 binance-coin 2019-12-03 15.19 15.55 15.05 15.31 2019    12  337\r\n3 binance-coin 2019-12-02 15.51 15.71 15.15 15.19 2019    12  336\r\n4 binance-coin 2019-12-01 15.74 15.74 15.05 15.50 2019    12  335\r\n5 binance-coin 2019-11-30 16.26 16.37 15.54 15.72 2019    11  334\r\n6 binance-coin 2019-11-29 15.68 16.34 15.65 16.27 2019    11  333\r\n\r\n… and turn it into a tibble afterwards:\r\n\r\n\r\ndata_xlsx <- tibble::as_tibble(data_xlsx)\r\n\r\ndata_xlsx\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency    date                 open  high   low close  year month\r\n   <chr>       <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-co~ 2019-12-04 00:00:00  15.4  15.7  15.0  15.3  2019    12\r\n 2 binance-co~ 2019-12-03 00:00:00  15.2  15.6  15.0  15.3  2019    12\r\n 3 binance-co~ 2019-12-02 00:00:00  15.5  15.7  15.2  15.2  2019    12\r\n 4 binance-co~ 2019-12-01 00:00:00  15.7  15.7  15.0  15.5  2019    12\r\n 5 binance-co~ 2019-11-30 00:00:00  16.3  16.4  15.5  15.7  2019    11\r\n 6 binance-co~ 2019-11-29 00:00:00  15.7  16.3  15.6  16.3  2019    11\r\n 7 binance-co~ 2019-11-28 00:00:00  16.1  16.2  15.6  15.7  2019    11\r\n 8 binance-co~ 2019-11-27 00:00:00  15.5  16.2  14.9  16.1  2019    11\r\n 9 binance-co~ 2019-11-26 00:00:00  15.3  15.9  15.2  15.5  2019    11\r\n10 binance-co~ 2019-11-25 00:00:00  15.3  15.7  14.2  15.3  2019    11\r\n# ... with 2,802 more rows, and 1 more variable: yday <dbl>\r\n\r\nOf course, one can load local files as well. Preferably with the help of the {here} package and R projects:\r\n\r\n\r\nhere::here()\r\n\r\n\r\n[1] \"C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\"\r\n\r\ndata_local <- readr::read_csv(here::here(\"data\", \"crypto_cleaned.csv\"))\r\n\r\ndata_local\r\n\r\n\r\n# A tibble: 2,812 x 9\r\n   currency     date        open  high   low close  year month  yday\r\n   <chr>        <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\r\n 1 binance-coin 2019-12-04  15.4  15.7  15.0  15.3  2019    12   338\r\n 2 binance-coin 2019-12-03  15.2  15.6  15.0  15.3  2019    12   337\r\n 3 binance-coin 2019-12-02  15.5  15.7  15.2  15.2  2019    12   336\r\n 4 binance-coin 2019-12-01  15.7  15.7  15.0  15.5  2019    12   335\r\n 5 binance-coin 2019-11-30  16.3  16.4  15.5  15.7  2019    11   334\r\n 6 binance-coin 2019-11-29  15.7  16.3  15.6  16.3  2019    11   333\r\n 7 binance-coin 2019-11-28  16.1  16.2  15.6  15.7  2019    11   332\r\n 8 binance-coin 2019-11-27  15.5  16.2  14.9  16.1  2019    11   331\r\n 9 binance-coin 2019-11-26  15.3  15.9  15.2  15.5  2019    11   330\r\n10 binance-coin 2019-11-25  15.3  15.7  14.2  15.3  2019    11   329\r\n# ... with 2,802 more rows\r\n\r\nAesthetics: aes()\r\nSome prefer to place the aes() outside the ggplot() call:\r\n\r\n\r\nggplot(data) +\r\n  aes(x = date, y = close)\r\n\r\n\r\n\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-12 16:19:56 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [dda0265] 2021-08-11: update segment 1\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n[1] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.7     purrr_0.3.4    \r\n[5] readr_1.4.0     tidyr_1.1.3     tibble_3.1.2    ggplot2_3.3.5  \r\n[9] tidyverse_1.3.1\r\n\r\nloaded via a namespace (and not attached):\r\n [1] httr_1.4.2        sass_0.4.0        jsonlite_1.7.2   \r\n [4] here_1.0.1        modelr_0.1.8      bslib_0.2.5.1    \r\n [7] assertthat_0.2.1  highr_0.9         cellranger_1.1.0 \r\n[10] yaml_2.2.1        pillar_1.6.1      backports_1.2.1  \r\n[13] glue_1.4.2        digest_0.6.27     rvest_1.0.0      \r\n[16] colorspace_2.0-2  htmltools_0.5.1.1 pkgconfig_2.0.3  \r\n[19] broom_0.7.8       haven_2.4.1       scales_1.1.1     \r\n[22] openxlsx_4.2.4    distill_1.2       rio_0.5.27       \r\n[25] downlit_0.2.1     git2r_0.28.0      generics_0.1.0   \r\n[28] farver_2.1.0      ellipsis_0.3.2    withr_2.4.2      \r\n[31] cli_3.0.0         magrittr_2.0.1    crayon_1.4.1     \r\n[34] readxl_1.3.1      evaluate_0.14     fs_1.5.0         \r\n[37] fansi_0.5.0       xml2_1.3.2        foreign_0.8-81   \r\n[40] textshaping_0.3.5 tools_4.1.0       data.table_1.14.0\r\n[43] hms_1.1.0         lifecycle_1.0.0   munsell_0.5.0    \r\n[46] reprex_2.0.0      zip_2.2.0         compiler_4.1.0   \r\n[49] jquerylib_0.1.4   systemfonts_1.0.2 rlang_0.4.11     \r\n[52] grid_4.1.0        rstudioapi_0.13   labeling_0.4.2   \r\n[55] rmarkdown_2.9     gtable_0.3.0      DBI_1.1.1        \r\n[58] curl_4.3.2        R6_2.5.0          lubridate_1.7.10 \r\n[61] knitr_1.33        utf8_1.2.1        rprojroot_2.0.2  \r\n[64] ragg_1.1.3        stringi_1.7.3     Rcpp_1.0.7       \r\n[67] vctrs_0.3.8       dbplyr_2.1.1      tidyselect_1.1.1 \r\n[70] xfun_0.24        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:19:59+02:00"
    },
    {
      "path": "02-layers-rmarkdown.html",
      "title": "Segment 2: Build Plots Layer by Layer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nSession Info\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-12 16:19:59 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [dda0265] 2021-08-11: update segment 1\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n[1] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.7     purrr_0.3.4    \r\n[5] readr_1.4.0     tidyr_1.1.3     tibble_3.1.2    ggplot2_3.3.5  \r\n[9] tidyverse_1.3.1\r\n\r\nloaded via a namespace (and not attached):\r\n [1] httr_1.4.2        sass_0.4.0        jsonlite_1.7.2   \r\n [4] here_1.0.1        modelr_0.1.8      bslib_0.2.5.1    \r\n [7] assertthat_0.2.1  highr_0.9         cellranger_1.1.0 \r\n[10] yaml_2.2.1        pillar_1.6.1      backports_1.2.1  \r\n[13] glue_1.4.2        digest_0.6.27     rvest_1.0.0      \r\n[16] colorspace_2.0-2  htmltools_0.5.1.1 pkgconfig_2.0.3  \r\n[19] broom_0.7.8       haven_2.4.1       bookdown_0.22    \r\n[22] scales_1.1.1      openxlsx_4.2.4    distill_1.2      \r\n[25] rio_0.5.27        downlit_0.2.1     git2r_0.28.0     \r\n[28] generics_0.1.0    farver_2.1.0      ellipsis_0.3.2   \r\n[31] withr_2.4.2       cli_3.0.0         magrittr_2.0.1   \r\n[34] crayon_1.4.1      readxl_1.3.1      evaluate_0.14    \r\n[37] fs_1.5.0          fansi_0.5.0       xml2_1.3.2       \r\n[40] foreign_0.8-81    textshaping_0.3.5 tools_4.1.0      \r\n[43] data.table_1.14.0 hms_1.1.0         lifecycle_1.0.0  \r\n[46] munsell_0.5.0     reprex_2.0.0      zip_2.2.0        \r\n[49] compiler_4.1.0    jquerylib_0.1.4   systemfonts_1.0.2\r\n[52] rlang_0.4.11      grid_4.1.0        rstudioapi_0.13  \r\n[55] labeling_0.4.2    rmarkdown_2.9     gtable_0.3.0     \r\n[58] DBI_1.1.1         curl_4.3.2        R6_2.5.0         \r\n[61] lubridate_1.7.10  knitr_1.33        utf8_1.2.1       \r\n[64] rprojroot_2.0.2   ragg_1.1.3        stringi_1.7.3    \r\n[67] Rcpp_1.0.7        vctrs_0.3.8       dbplyr_2.1.1     \r\n[70] tidyselect_1.1.1  xfun_0.24        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:20:00+02:00"
    },
    {
      "path": "03-polish-rmarkdown.html",
      "title": "Segment 3: Provide Context with Annotations",
      "author": [],
      "contents": "\r\n\r\nContents\r\nSession Info\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-12 16:20:00 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [dda0265] 2021-08-11: update segment 1\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n[1] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.7     purrr_0.3.4    \r\n[5] readr_1.4.0     tidyr_1.1.3     tibble_3.1.2    ggplot2_3.3.5  \r\n[9] tidyverse_1.3.1\r\n\r\nloaded via a namespace (and not attached):\r\n [1] httr_1.4.2        sass_0.4.0        jsonlite_1.7.2   \r\n [4] here_1.0.1        modelr_0.1.8      bslib_0.2.5.1    \r\n [7] assertthat_0.2.1  highr_0.9         cellranger_1.1.0 \r\n[10] yaml_2.2.1        pillar_1.6.1      backports_1.2.1  \r\n[13] glue_1.4.2        digest_0.6.27     rvest_1.0.0      \r\n[16] colorspace_2.0-2  htmltools_0.5.1.1 pkgconfig_2.0.3  \r\n[19] broom_0.7.8       haven_2.4.1       bookdown_0.22    \r\n[22] scales_1.1.1      openxlsx_4.2.4    distill_1.2      \r\n[25] rio_0.5.27        downlit_0.2.1     git2r_0.28.0     \r\n[28] generics_0.1.0    farver_2.1.0      ellipsis_0.3.2   \r\n[31] withr_2.4.2       cli_3.0.0         magrittr_2.0.1   \r\n[34] crayon_1.4.1      readxl_1.3.1      evaluate_0.14    \r\n[37] fs_1.5.0          fansi_0.5.0       xml2_1.3.2       \r\n[40] foreign_0.8-81    textshaping_0.3.5 tools_4.1.0      \r\n[43] data.table_1.14.0 hms_1.1.0         lifecycle_1.0.0  \r\n[46] munsell_0.5.0     reprex_2.0.0      zip_2.2.0        \r\n[49] compiler_4.1.0    jquerylib_0.1.4   systemfonts_1.0.2\r\n[52] rlang_0.4.11      grid_4.1.0        rstudioapi_0.13  \r\n[55] labeling_0.4.2    rmarkdown_2.9     gtable_0.3.0     \r\n[58] DBI_1.1.1         curl_4.3.2        R6_2.5.0         \r\n[61] lubridate_1.7.10  knitr_1.33        utf8_1.2.1       \r\n[64] rprojroot_2.0.2   ragg_1.1.3        stringi_1.7.3    \r\n[67] Rcpp_1.0.7        vctrs_0.3.8       dbplyr_2.1.1     \r\n[70] tidyselect_1.1.1  xfun_0.24        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:20:02+02:00"
    },
    {
      "path": "04-annotation-rmarkdown.html",
      "title": "Segment 4: Provide Context with Annotations",
      "author": [],
      "contents": "\r\n\r\nContents\r\nSession Info\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-12 16:20:02 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [dda0265] 2021-08-11: update segment 1\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n[1] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.7     purrr_0.3.4    \r\n[5] readr_1.4.0     tidyr_1.1.3     tibble_3.1.2    ggplot2_3.3.5  \r\n[9] tidyverse_1.3.1\r\n\r\nloaded via a namespace (and not attached):\r\n [1] httr_1.4.2        sass_0.4.0        jsonlite_1.7.2   \r\n [4] here_1.0.1        modelr_0.1.8      bslib_0.2.5.1    \r\n [7] assertthat_0.2.1  highr_0.9         cellranger_1.1.0 \r\n[10] yaml_2.2.1        pillar_1.6.1      backports_1.2.1  \r\n[13] glue_1.4.2        digest_0.6.27     rvest_1.0.0      \r\n[16] colorspace_2.0-2  htmltools_0.5.1.1 pkgconfig_2.0.3  \r\n[19] broom_0.7.8       haven_2.4.1       bookdown_0.22    \r\n[22] scales_1.1.1      openxlsx_4.2.4    distill_1.2      \r\n[25] rio_0.5.27        downlit_0.2.1     git2r_0.28.0     \r\n[28] generics_0.1.0    farver_2.1.0      ellipsis_0.3.2   \r\n[31] withr_2.4.2       cli_3.0.0         magrittr_2.0.1   \r\n[34] crayon_1.4.1      readxl_1.3.1      evaluate_0.14    \r\n[37] fs_1.5.0          fansi_0.5.0       xml2_1.3.2       \r\n[40] foreign_0.8-81    textshaping_0.3.5 tools_4.1.0      \r\n[43] data.table_1.14.0 hms_1.1.0         lifecycle_1.0.0  \r\n[46] munsell_0.5.0     reprex_2.0.0      zip_2.2.0        \r\n[49] compiler_4.1.0    jquerylib_0.1.4   systemfonts_1.0.2\r\n[52] rlang_0.4.11      grid_4.1.0        rstudioapi_0.13  \r\n[55] labeling_0.4.2    rmarkdown_2.9     gtable_0.3.0     \r\n[58] DBI_1.1.1         curl_4.3.2        R6_2.5.0         \r\n[61] lubridate_1.7.10  knitr_1.33        utf8_1.2.1       \r\n[64] rprojroot_2.0.2   ragg_1.1.3        stringi_1.7.3    \r\n[67] Rcpp_1.0.7        vctrs_0.3.8       dbplyr_2.1.1     \r\n[70] tidyselect_1.1.1  xfun_0.24        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:20:03+02:00"
    },
    {
      "path": "05-multipanel-rmarkdown.html",
      "title": "Segment 5: Create Multi-Panel Figures",
      "author": [],
      "contents": "\r\n\r\nContents\r\nSession Info\r\n\r\nSession Info\r\n\r\nExpand for details\r\n\r\n[1] \"2021-08-12 16:20:07 CEST\"\r\nLocal:    main C:/Users/DataVizard/Google Drive/Work/DataViz/Teaching/2021_OReilly_Trainings/hands-on-ggplot2\r\nRemote:   main @ origin (https://github.com/z3tt/hands-on-ggplot2.git)\r\nHead:     [6a3f1be] 2021-08-12: add segment 2 + update segment 1\r\nR version 4.1.0 (2021-05-18)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19043)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=German_Germany.1252  LC_CTYPE=German_Germany.1252   \r\n[3] LC_MONETARY=German_Germany.1252 LC_NUMERIC=C                   \r\n[5] LC_TIME=German_Germany.1252    \r\nsystem code page: 65001\r\n\r\nattached base packages:\r\n[1] stats     graphics  grDevices utils     datasets  methods  \r\n[7] base     \r\n\r\nother attached packages:\r\n[1] forcats_0.5.1   stringr_1.4.0   dplyr_1.0.7     purrr_0.3.4    \r\n[5] readr_1.4.0     tidyr_1.1.3     tibble_3.1.2    ggplot2_3.3.5  \r\n[9] tidyverse_1.3.1\r\n\r\nloaded via a namespace (and not attached):\r\n [1] httr_1.4.2        sass_0.4.0        jsonlite_1.7.2   \r\n [4] here_1.0.1        modelr_0.1.8      bslib_0.2.5.1    \r\n [7] assertthat_0.2.1  highr_0.9         cellranger_1.1.0 \r\n[10] yaml_2.2.1        pillar_1.6.1      backports_1.2.1  \r\n[13] glue_1.4.2        digest_0.6.27     rvest_1.0.0      \r\n[16] colorspace_2.0-2  htmltools_0.5.1.1 pkgconfig_2.0.3  \r\n[19] broom_0.7.8       haven_2.4.1       bookdown_0.22    \r\n[22] scales_1.1.1      openxlsx_4.2.4    distill_1.2      \r\n[25] rio_0.5.27        downlit_0.2.1     git2r_0.28.0     \r\n[28] generics_0.1.0    farver_2.1.0      ellipsis_0.3.2   \r\n[31] withr_2.4.2       cli_3.0.0         magrittr_2.0.1   \r\n[34] crayon_1.4.1      readxl_1.3.1      evaluate_0.14    \r\n[37] fs_1.5.0          fansi_0.5.0       xml2_1.3.2       \r\n[40] foreign_0.8-81    textshaping_0.3.5 tools_4.1.0      \r\n[43] data.table_1.14.0 hms_1.1.0         lifecycle_1.0.0  \r\n[46] munsell_0.5.0     reprex_2.0.0      zip_2.2.0        \r\n[49] compiler_4.1.0    jquerylib_0.1.4   systemfonts_1.0.2\r\n[52] rlang_0.4.11      grid_4.1.0        rstudioapi_0.13  \r\n[55] labeling_0.4.2    rmarkdown_2.9     gtable_0.3.0     \r\n[58] DBI_1.1.1         curl_4.3.2        R6_2.5.0         \r\n[61] lubridate_1.7.10  knitr_1.33        utf8_1.2.1       \r\n[64] rprojroot_2.0.2   ragg_1.1.3        stringi_1.7.3    \r\n[67] Rcpp_1.0.7        vctrs_0.3.8       dbplyr_2.1.1     \r\n[70] tidyselect_1.1.1  xfun_0.24        \r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:20:09+02:00"
    },
    {
      "path": "about.html",
      "title": "Dr Cédric Scherer",
      "author": [],
      "contents": "\r\n\r\n          \r\n          \r\n          Hands-On DataViz with ggplot2\r\n          \r\n          \r\n          Schedule\r\n          \r\n          \r\n          Slides\r\n           \r\n          ▾\r\n          \r\n          \r\n          1. The Grammar of Graphics\r\n          2. Build Plots Layer by Layer\r\n          3. Polish Your Visualization\r\n          4. Provide Context with Annotations\r\n          5. Create Multi-Panel Figures \r\n          \r\n          \r\n          \r\n          \r\n          Notebooks\r\n           \r\n          ▾\r\n          \r\n          \r\n          1. The Grammar of Graphics\r\n          2. Build Plots Layer by Layer\r\n          3. Polish Your Visualization\r\n          4. Provide Context with Annotations\r\n          5. Create Multi-Panel Figures \r\n          \r\n          \r\n          \r\n          \r\n          Codes\r\n           \r\n          ▾\r\n          \r\n          \r\n          1. The Grammar of Graphics\r\n          2. Build Plots Layer by Layer\r\n          3. Polish Your Visualization\r\n          4. Provide Context with Annotations\r\n          5. Create Multi-Panel Figures \r\n          \r\n          \r\n          About\r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          ☰\r\n          \r\n          \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Dr Cédric Scherer\r\n            \r\n            \r\n              \r\n                \r\n                    \r\n                      \r\n                        Homepage\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        Twitter\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        LinkedIn\r\n                      \r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      \r\n                        GitHub\r\n                      \r\n                    \r\n                  \r\n                                  \r\n            \r\n          \r\n        \r\n        \r\n        \r\n          \r\n            Cédric is a graduated computational ecologist with a passion for design. In 2020, he combined his expertise in analyzing and visualizing large data sets in R with his passion to become a freelance data visualization specialist.\r\n            Cédric has created visualizations across all disciplines, purposes, and styles and regularly teaches data visualization principles, R, and ggplot2. Due to regular participation to social data challenges, he is now well known for complex and visually appealing figures, entirely made with ggplot2, that look as they have been created with a vector design tool.\r\n          \r\n        \r\n      \r\n    \r\n\r\n    \r\n      \r\n        \r\n          \r\n            \r\n              \r\n            \r\n              Dr Cédric Scherer\r\n            \r\n            \r\n              \r\n                \r\n                                    \r\n                    \r\n                      Homepage\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      Twitter\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      LinkedIn\r\n                    \r\n                  \r\n                                    \r\n                    \r\n                      GitHub\r\n                    \r\n                  \r\n                                  \r\n              \r\n            \r\n            \r\n              Cédric is a graduated computational ecologist with a passion for design. In 2020, he combined his expertise in analyzing and visualizing large data sets in R with his passion to become a freelance data visualization specialist.\r\n              Cédric has created visualizations across all disciplines, purposes, and styles and regularly teaches data visualization principles, R, and ggplot2. Due to regular participation to social data challenges, he is now well known for complex and visually appealing figures, entirely made with ggplot2, that look as they have been created with a vector design tool.\r\n            \r\n        \r\n      \r\n    \r\n\r\n    \r\n    \r\n    ",
      "last_modified": "2021-08-12T16:20:10+02:00"
    },
    {
      "path": "index.html",
      "title": "Hands–On Data Visualization with ggplot2",
      "description": "How to Create Engaging and Well–Designed Visualizations in R",
      "author": [],
      "contents": "\r\nOverview\r\nThis is the home page for the Pearson Live Training Session “Hands–On Data Visualization with ggplot2” for O’Reilly. All course materials will be posted on this site.\r\nDetails\r\nInstructor: Dr Cédric SchererDate: September 3, 2021\r\nWhat You’ll Learn\r\nLoad data into R and visualize it with the help of the powerful ggplot2 library.\r\nCustomize your ggplot2 output as you like including theming, colors, annotations, and many more.\r\nGet to know useful extension libraries that will boost your workflow and improve your ggplot2 design.\r\nUse Rmarkdown notebooks to build reproducible reports.\r\nGet insights how to prepare and wrangle data with the popular tidyverse package collection.\r\nWho is the Training for\r\nAnyone interested in creating visually appealing charts with R and ggplot2—no matter if you have no or minimal experience with R.\r\nData scientists aiming to use the powerful ggplot2 library in their workflow for exploration and communication.\r\nBusiness managers that aim to quickly gain data insights based on reproducible and elegantly formatted charts and reports.\r\nPrerequisites and Preparation\r\nFamiliarity with Rstudio (required)Suggested Material:\r\nBook: Chapter 1 of “R for Data Science” by Hadley Wickham & Garrett Grolemund\r\nVideo: Chapter 2 of “R Programming for Statistics and Data Science” by 365 Careers\r\n\r\nBasic Knowledge of R (helpful but not required)Suggested Material:\r\nBook: Chapter 4–6 of “R for Data Science” by Hadley Wickham & Garrett Grolemund\r\nBook: Chapter 1–3 “R for Everyone: Advanced Analytics and Graphics, 2nd Edition” by Jared Lander\r\nBook: Section 1 and 3 “Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R” by Joel Ross & Michael Freeman\r\nVideo: Chapters 3, 4, and 7 of “R Programming for Statistics and Data Science” by 365 Careers\r\n\r\nData Wrangling with the tidyverse (helpful but not required)Suggested Material:\r\nBook: Chapter 9–16 (Section: Wrangle) of “R for Data Science” by Hadley Wickham & Garrett Grolemund\r\nScenario: “Format and Shape Your Data in R with the Tidyverse” by Martin Frigaard\r\n\r\nCourse Set-Up\r\nTo run any of the materials locally on your own machine, you will need the following:\r\nA recent version of R (download from here) and RStudio, (download from here).\r\nfor more detailed instructions see Chapter 2 of “R Programming for Statistics and Data Science” by 365 Careers\r\n\r\nThe following R packages:\r\ntidyverse (includes ggplot2)\r\nggrepel\r\nggtext\r\npatchwork\r\nggforce\r\nragg\r\nmagick\r\n\r\nYou can install all required R packages at once by running the following code in the R command line:\r\n\r\n\r\n# Package names\r\npackages <- c(\"tidyverse\", \"ggrepel\", \"ggtext\", \"patchwork\", \"ragg\", \"magick\")\r\ninstall.packages(packages)\r\n\r\n\r\n\r\nTo run the code, open up Rstudio and copy–paste the code in console windonw and hit enter. Several messages should pop up. Scan these messages that are returned for errors and troubleshoot them if necessary. Warnings and other informational messages can be ignored.\r\nReuse\r\nText and figures are licensed under Creative Commons Attribution CC BY 4.0.Note that figures in slides may be pulled in from external sources and may be licensed under different terms.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:20:13+02:00"
    },
    {
      "path": "schedule.html",
      "title": "Course Schedule",
      "description": "The live video training session takes 5 hours and constists of five segments. Each segment contains a lecture, hands-on examples, exercises, and a Q&A session.\n",
      "author": [],
      "contents": "\r\nSegment 1The Grammar of Graphics\r\nDuration: 60 min\r\nMotivation: The ggplot2 Showcase\r\nLoading data into R\r\nThe Grammar of Graphics\r\nOur First ggplot\r\n→ Slides\r\n→ Codes\r\n→ Solutions TBA\r\nBreak: 5 min\r\nSegment 2Build Plots Layer by Layer\r\nDuration: 60 min\r\n\r\n\r\nCreate any Chart Type\r\nUse Statistical Transformations\r\nPlot Spatial Maps\r\n→ Slides\r\n→ Codes\r\n→ Solutions TBA\r\nBreak: 10 min\r\nSegment 3Polish Your Visualization\r\nDuration: 60 min\r\nWork with Colors, Shapes, and Guides\r\nUse Template Designs\r\nCreate Custom Themes\r\n→ Slides\r\n→ Codes\r\n→ Solutions TBA\r\nBreak: 5 min\r\nSegment 4Provide Context with Annotations\r\nDuration: 45 min\r\nInsert Titles and Labels\r\nBasic and Advanced Text Labeling\r\nAdd Images and Illustrations\r\n→ Slides\r\n→ Codes\r\n→ Solutions TBA\r\nBreak: 10 min\r\nSegment 5Create Multi–Panel Figures\r\nDuration: 30 min\r\nCreate Small Multiples (Facets)\r\nCombine Multiple Plots with patchwork\r\n→ Slides\r\n→ Codes\r\n→ Solutions TBA\r\nReuse\r\nText and figures are licensed under Creative Commons Attribution CC BY 4.0.Note that figures in slides may be pulled in from external sources and may be licensed under different terms.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-12T16:20:15+02:00"
    }
  ],
  "collections": []
}
